# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NewsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def news_get_news(self, account_number, **kwargs):  # noqa: E501
        """All  # noqa: E501

        Get news for the specified selection. The first 250 news messages for the selection in the news history are available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.news_get_news(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param datetime from_date: Optional start date, if left out, fromDate will be today. If no instrument ids are supplied, only dates from the  last month are accepted, otherwise only dates from the last week are accepted.
        :param datetime to_date: Optional end date, do not combine with instruments.
        :param str instrument_ids: Optional ids of the instruments to retrieve.  If there are multiple ids, separate them by commas.
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: NewsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.news_get_news_with_http_info(account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.news_get_news_with_http_info(account_number, **kwargs)  # noqa: E501
            return data

    def news_get_news_with_http_info(self, account_number, **kwargs):  # noqa: E501
        """All  # noqa: E501

        Get news for the specified selection. The first 250 news messages for the selection in the news history are available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.news_get_news_with_http_info(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param datetime from_date: Optional start date, if left out, fromDate will be today. If no instrument ids are supplied, only dates from the  last month are accepted, otherwise only dates from the last week are accepted.
        :param datetime to_date: Optional end date, do not combine with instruments.
        :param str instrument_ids: Optional ids of the instruments to retrieve.  If there are multiple ids, separate them by commas.
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: NewsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'from_date', 'to_date', 'instrument_ids', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method news_get_news" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `news_get_news`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `news_get_news`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `news_get_news`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `news_get_news`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `news_get_news`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'instrument_ids' in params:
            query_params.append(('instrumentIds', params['instrument_ids']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/news', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewsResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
