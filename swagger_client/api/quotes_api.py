# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QuotesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def quotes_get_historical_quotes(self, instrument_id, account_number, from_date_time, interval, **kwargs):  # noqa: E501
        """History  # noqa: E501

        Get historical quotes for an instrument over a period. The different intervals each have different maximum period lengths, ranging from five days for one minute, to 10 years for one week.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotes_get_historical_quotes(instrument_id, account_number, from_date_time, interval, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_id: The Id of the instrument for which the historical quotes will be retrieved (required)
        :param str account_number: Mandatory account number (required)
        :param datetime from_date_time: The start moment of historical quotes (required)
        :param str interval: Interval for historical quotes  Depending on the interval, the historical quotes collection returned will be limited to a certain period:  Max. number of days for one minute interval is 5.  Max. number of days for five minute interval is 20.  Max. number of days for ten minute interval is 20.  Max. number of days for fifteen minute interval is 60.  Max. number of days for one hour interval is 120.  Max. number of years for one day interval is 10.  Max. number of years for one week interval is 10. (required)
        :param datetime to_date_time: The end moment of historical quotes, defaulting to the Current date and time according to UTC time standard
        :return: HistoricalQuotesResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotes_get_historical_quotes_with_http_info(instrument_id, account_number, from_date_time, interval, **kwargs)  # noqa: E501
        else:
            (data) = self.quotes_get_historical_quotes_with_http_info(instrument_id, account_number, from_date_time, interval, **kwargs)  # noqa: E501
            return data

    def quotes_get_historical_quotes_with_http_info(self, instrument_id, account_number, from_date_time, interval, **kwargs):  # noqa: E501
        """History  # noqa: E501

        Get historical quotes for an instrument over a period. The different intervals each have different maximum period lengths, ranging from five days for one minute, to 10 years for one week.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotes_get_historical_quotes_with_http_info(instrument_id, account_number, from_date_time, interval, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_id: The Id of the instrument for which the historical quotes will be retrieved (required)
        :param str account_number: Mandatory account number (required)
        :param datetime from_date_time: The start moment of historical quotes (required)
        :param str interval: Interval for historical quotes  Depending on the interval, the historical quotes collection returned will be limited to a certain period:  Max. number of days for one minute interval is 5.  Max. number of days for five minute interval is 20.  Max. number of days for ten minute interval is 20.  Max. number of days for fifteen minute interval is 60.  Max. number of days for one hour interval is 120.  Max. number of years for one day interval is 10.  Max. number of years for one week interval is 10. (required)
        :param datetime to_date_time: The end moment of historical quotes, defaulting to the Current date and time according to UTC time standard
        :return: HistoricalQuotesResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instrument_id', 'account_number', 'from_date_time', 'interval', 'to_date_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotes_get_historical_quotes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instrument_id' is set
        if self.api_client.client_side_validation and ('instrument_id' not in params or
                                                       params['instrument_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument_id` when calling `quotes_get_historical_quotes`")  # noqa: E501
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `quotes_get_historical_quotes`")  # noqa: E501
        # verify the required parameter 'from_date_time' is set
        if self.api_client.client_side_validation and ('from_date_time' not in params or
                                                       params['from_date_time'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_date_time` when calling `quotes_get_historical_quotes`")  # noqa: E501
        # verify the required parameter 'interval' is set
        if self.api_client.client_side_validation and ('interval' not in params or
                                                       params['interval'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `interval` when calling `quotes_get_historical_quotes`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `quotes_get_historical_quotes`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `quotes_get_historical_quotes`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `quotes_get_historical_quotes`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'instrument_id' in params:
            path_params['instrumentId'] = params['instrument_id']  # noqa: E501

        query_params = []
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'from_date_time' in params:
            query_params.append(('fromDateTime', params['from_date_time']))  # noqa: E501
        if 'to_date_time' in params:
            query_params.append(('toDateTime', params['to_date_time']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/quotes/{instrumentId}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HistoricalQuotesResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quotes_get_quotes(self, account_number, instrument_ids, **kwargs):  # noqa: E501
        """Latest  # noqa: E501

        Get current quotes and quote subscription (realtime/delayed) for one or more instruments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotes_get_quotes(account_number, instrument_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param str instrument_ids: Ids of the instruments to retrieve. If there are multiple ids, separate them by commas. (required)
        :param str level: The maximal quote level returned
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: QuotesResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotes_get_quotes_with_http_info(account_number, instrument_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.quotes_get_quotes_with_http_info(account_number, instrument_ids, **kwargs)  # noqa: E501
            return data

    def quotes_get_quotes_with_http_info(self, account_number, instrument_ids, **kwargs):  # noqa: E501
        """Latest  # noqa: E501

        Get current quotes and quote subscription (realtime/delayed) for one or more instruments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotes_get_quotes_with_http_info(account_number, instrument_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param str instrument_ids: Ids of the instruments to retrieve. If there are multiple ids, separate them by commas. (required)
        :param str level: The maximal quote level returned
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: QuotesResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'instrument_ids', 'level', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotes_get_quotes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `quotes_get_quotes`")  # noqa: E501
        # verify the required parameter 'instrument_ids' is set
        if self.api_client.client_side_validation and ('instrument_ids' not in params or
                                                       params['instrument_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `instrument_ids` when calling `quotes_get_quotes`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `quotes_get_quotes`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `quotes_get_quotes`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `quotes_get_quotes`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `quotes_get_quotes`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'instrument_ids' in params:
            query_params.append(('instrumentIds', params['instrument_ids']))  # noqa: E501
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/quotes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuotesResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
