# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OrdersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def orders_cancel_order(self, account_number, number, **kwargs):  # noqa: E501
        """Cancellation  # noqa: E501

        Cancel an order. Allowed for open orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_cancel_order(account_number, number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number used to register the order. (required)
        :param int number: The order number for this account. (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_cancel_order_with_http_info(account_number, number, **kwargs)  # noqa: E501
        else:
            (data) = self.orders_cancel_order_with_http_info(account_number, number, **kwargs)  # noqa: E501
            return data

    def orders_cancel_order_with_http_info(self, account_number, number, **kwargs):  # noqa: E501
        """Cancellation  # noqa: E501

        Cancel an order. Allowed for open orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_cancel_order_with_http_info(account_number, number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number used to register the order. (required)
        :param int number: The order number for this account. (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_cancel_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `orders_cancel_order`")  # noqa: E501
        # verify the required parameter 'number' is set
        if self.api_client.client_side_validation and ('number' not in params or
                                                       params['number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `number` when calling `orders_cancel_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501
        if 'number' in params:
            path_params['number'] = params['number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountNumber}/orders/{number}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orders_get_historical_orders(self, account_number, year, month, **kwargs):  # noqa: E501
        """History  # noqa: E501

        Get all the historical orders of an account. The response contains the historical orders of the requested month. If there is no order yet, the collection will be empty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_get_historical_orders(account_number, year, month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number. (required)
        :param int year: The year for which the historical orders should be retrieved (required)
        :param int month: The month for which the historical orders should be retrieved (required)
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_get_historical_orders_with_http_info(account_number, year, month, **kwargs)  # noqa: E501
        else:
            (data) = self.orders_get_historical_orders_with_http_info(account_number, year, month, **kwargs)  # noqa: E501
            return data

    def orders_get_historical_orders_with_http_info(self, account_number, year, month, **kwargs):  # noqa: E501
        """History  # noqa: E501

        Get all the historical orders of an account. The response contains the historical orders of the requested month. If there is no order yet, the collection will be empty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_get_historical_orders_with_http_info(account_number, year, month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number. (required)
        :param int year: The year for which the historical orders should be retrieved (required)
        :param int month: The month for which the historical orders should be retrieved (required)
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'year', 'month', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_get_historical_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `orders_get_historical_orders`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in params or
                                                       params['year'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `year` when calling `orders_get_historical_orders`")  # noqa: E501
        # verify the required parameter 'month' is set
        if self.api_client.client_side_validation and ('month' not in params or
                                                       params['month'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `month` when calling `orders_get_historical_orders`")  # noqa: E501

        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `orders_get_historical_orders`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501

        query_params = []
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'month' in params:
            query_params.append(('month', params['month']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountNumber}/orders/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orders_get_order(self, account_number, number, **kwargs):  # noqa: E501
        """Order info  # noqa: E501

        Get a specific order for an account. If the order has multiple legs, multiple order objects are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_get_order(account_number, number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number used to register the order. (required)
        :param int number: The order number for this account. (required)
        :param bool include_status_history: When set to True, order will include a detailed status history overview. When set to False, the response doesn't contain the status history, but the request will be handled faster. Default is True.
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_get_order_with_http_info(account_number, number, **kwargs)  # noqa: E501
        else:
            (data) = self.orders_get_order_with_http_info(account_number, number, **kwargs)  # noqa: E501
            return data

    def orders_get_order_with_http_info(self, account_number, number, **kwargs):  # noqa: E501
        """Order info  # noqa: E501

        Get a specific order for an account. If the order has multiple legs, multiple order objects are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_get_order_with_http_info(account_number, number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number used to register the order. (required)
        :param int number: The order number for this account. (required)
        :param bool include_status_history: When set to True, order will include a detailed status history overview. When set to False, the response doesn't contain the status history, but the request will be handled faster. Default is True.
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'number', 'include_status_history']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_get_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `orders_get_order`")  # noqa: E501
        # verify the required parameter 'number' is set
        if self.api_client.client_side_validation and ('number' not in params or
                                                       params['number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `number` when calling `orders_get_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501
        if 'number' in params:
            path_params['number'] = params['number']  # noqa: E501

        query_params = []
        if 'include_status_history' in params:
            query_params.append(('includeStatusHistory', params['include_status_history']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountNumber}/orders/{number}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orders_get_orders(self, account_number, **kwargs):  # noqa: E501
        """Recent  # noqa: E501

        Get all active/recent orders of an account. The response contains the active, cancelled and recent orders. If there is no order, the collection will be empty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_get_orders(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number. (required)
        :param str status: Status 'all' will select all the orders. Other possible values are 'open', 'executed' and 'canceled'.
        :param bool include_status_history: When set to True, orders will include a detailed status history overview. When set to false the response doesn't contain the status history, but the request will be handled faster. Default is True.
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_get_orders_with_http_info(account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.orders_get_orders_with_http_info(account_number, **kwargs)  # noqa: E501
            return data

    def orders_get_orders_with_http_info(self, account_number, **kwargs):  # noqa: E501
        """Recent  # noqa: E501

        Get all active/recent orders of an account. The response contains the active, cancelled and recent orders. If there is no order, the collection will be empty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_get_orders_with_http_info(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number. (required)
        :param str status: Status 'all' will select all the orders. Other possible values are 'open', 'executed' and 'canceled'.
        :param bool include_status_history: When set to True, orders will include a detailed status history overview. When set to false the response doesn't contain the status history, but the request will be handled faster. Default is True.
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'status', 'include_status_history', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_get_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `orders_get_orders`")  # noqa: E501

        if self.api_client.client_side_validation and ('status' in params and not re.search(r'^all$|^open$|^executed$|^canceled$', params['status'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `status` when calling `orders_get_orders`, must conform to the pattern `/^all$|^open$|^executed$|^canceled$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `orders_get_orders`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'include_status_history' in params:
            query_params.append(('includeStatusHistory', params['include_status_history']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountNumber}/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orders_modify_order(self, account_number, number, modified_order, **kwargs):  # noqa: E501
        """Modification  # noqa: E501

        Modify an existing order. First, make sure the modification is valid by doing a preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_modify_order(account_number, number, modified_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: An account number. (required)
        :param int number: The order number. (required)
        :param ModifyOrderModel modified_order: Modifications to be used for the order. (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_modify_order_with_http_info(account_number, number, modified_order, **kwargs)  # noqa: E501
        else:
            (data) = self.orders_modify_order_with_http_info(account_number, number, modified_order, **kwargs)  # noqa: E501
            return data

    def orders_modify_order_with_http_info(self, account_number, number, modified_order, **kwargs):  # noqa: E501
        """Modification  # noqa: E501

        Modify an existing order. First, make sure the modification is valid by doing a preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_modify_order_with_http_info(account_number, number, modified_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: An account number. (required)
        :param int number: The order number. (required)
        :param ModifyOrderModel modified_order: Modifications to be used for the order. (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'number', 'modified_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_modify_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `orders_modify_order`")  # noqa: E501
        # verify the required parameter 'number' is set
        if self.api_client.client_side_validation and ('number' not in params or
                                                       params['number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `number` when calling `orders_modify_order`")  # noqa: E501
        # verify the required parameter 'modified_order' is set
        if self.api_client.client_side_validation and ('modified_order' not in params or
                                                       params['modified_order'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `modified_order` when calling `orders_modify_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501
        if 'number' in params:
            path_params['number'] = params['number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'modified_order' in params:
            body_params = params['modified_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountNumber}/orders/{number}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orders_preview_modify_order(self, account_number, number, modified_order, **kwargs):  # noqa: E501
        """Validate modification  # noqa: E501

        Validate the modification of an order. This allows you to validate an order modification without sending it to the market. The order will not be created.  The response will contain information about if the order can be processed.  It also might include warnings to show to the customer. And confirmations, which are warnings to be approved by the customer, before placing the order modification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_preview_modify_order(account_number, number, modified_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: An account number. (required)
        :param int number: The order number. (required)
        :param ModifyOrderModel modified_order: Modifications to be used for the order. (required)
        :return: PreviewOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_preview_modify_order_with_http_info(account_number, number, modified_order, **kwargs)  # noqa: E501
        else:
            (data) = self.orders_preview_modify_order_with_http_info(account_number, number, modified_order, **kwargs)  # noqa: E501
            return data

    def orders_preview_modify_order_with_http_info(self, account_number, number, modified_order, **kwargs):  # noqa: E501
        """Validate modification  # noqa: E501

        Validate the modification of an order. This allows you to validate an order modification without sending it to the market. The order will not be created.  The response will contain information about if the order can be processed.  It also might include warnings to show to the customer. And confirmations, which are warnings to be approved by the customer, before placing the order modification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_preview_modify_order_with_http_info(account_number, number, modified_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: An account number. (required)
        :param int number: The order number. (required)
        :param ModifyOrderModel modified_order: Modifications to be used for the order. (required)
        :return: PreviewOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'number', 'modified_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_preview_modify_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `orders_preview_modify_order`")  # noqa: E501
        # verify the required parameter 'number' is set
        if self.api_client.client_side_validation and ('number' not in params or
                                                       params['number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `number` when calling `orders_preview_modify_order`")  # noqa: E501
        # verify the required parameter 'modified_order' is set
        if self.api_client.client_side_validation and ('modified_order' not in params or
                                                       params['modified_order'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `modified_order` when calling `orders_preview_modify_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501
        if 'number' in params:
            path_params['number'] = params['number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'modified_order' in params:
            body_params = params['modified_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountNumber}/orders/{number}/preview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreviewOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orders_preview_order(self, account_number, new_order, **kwargs):  # noqa: E501
        """Validate new  # noqa: E501

        Preview an order. This allows you to validate an order without sending it to the market. The order will not be created. The response will contain information about if the order can be processed.  It also includes warnings to show to the customer. And confirmations, which are warnings to be approved by the customer, before placing the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_preview_order(account_number, new_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number to register the order. (required)
        :param NewOrderModel new_order: Specifications to be used for the order. (required)
        :return: PreviewOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_preview_order_with_http_info(account_number, new_order, **kwargs)  # noqa: E501
        else:
            (data) = self.orders_preview_order_with_http_info(account_number, new_order, **kwargs)  # noqa: E501
            return data

    def orders_preview_order_with_http_info(self, account_number, new_order, **kwargs):  # noqa: E501
        """Validate new  # noqa: E501

        Preview an order. This allows you to validate an order without sending it to the market. The order will not be created. The response will contain information about if the order can be processed.  It also includes warnings to show to the customer. And confirmations, which are warnings to be approved by the customer, before placing the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_preview_order_with_http_info(account_number, new_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number to register the order. (required)
        :param NewOrderModel new_order: Specifications to be used for the order. (required)
        :return: PreviewOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'new_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_preview_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `orders_preview_order`")  # noqa: E501
        # verify the required parameter 'new_order' is set
        if self.api_client.client_side_validation and ('new_order' not in params or
                                                       params['new_order'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_order` when calling `orders_preview_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_order' in params:
            body_params = params['new_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountNumber}/orders/preview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreviewOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orders_preview_order_costs(self, account_number, new_order, **kwargs):  # noqa: E501
        """Costs  # noqa: E501

        Preview the costs for an order. This allows you to check costs for an order without sending it to the market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_preview_order_costs(account_number, new_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number to register the order. (required)
        :param NewOrderModel new_order: Specifications to be used for the order. (required)
        :return: OrderCostsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_preview_order_costs_with_http_info(account_number, new_order, **kwargs)  # noqa: E501
        else:
            (data) = self.orders_preview_order_costs_with_http_info(account_number, new_order, **kwargs)  # noqa: E501
            return data

    def orders_preview_order_costs_with_http_info(self, account_number, new_order, **kwargs):  # noqa: E501
        """Costs  # noqa: E501

        Preview the costs for an order. This allows you to check costs for an order without sending it to the market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_preview_order_costs_with_http_info(account_number, new_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: The account number to register the order. (required)
        :param NewOrderModel new_order: Specifications to be used for the order. (required)
        :return: OrderCostsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'new_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_preview_order_costs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `orders_preview_order_costs`")  # noqa: E501
        # verify the required parameter 'new_order' is set
        if self.api_client.client_side_validation and ('new_order' not in params or
                                                       params['new_order'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_order` when calling `orders_preview_order_costs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_order' in params:
            body_params = params['new_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountNumber}/orders/costs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderCostsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orders_register_order(self, account_number, new_order, **kwargs):  # noqa: E501
        """New  # noqa: E501

        Register an order to sent to the market. This order will be sent to the market and executed according to the specifications. Something to be aware of: the response of this call might arrive after the order event from the realtime feed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_register_order(account_number, new_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: An account number to register the order. (required)
        :param NewOrderModel new_order: Specifications to be used for the order. (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orders_register_order_with_http_info(account_number, new_order, **kwargs)  # noqa: E501
        else:
            (data) = self.orders_register_order_with_http_info(account_number, new_order, **kwargs)  # noqa: E501
            return data

    def orders_register_order_with_http_info(self, account_number, new_order, **kwargs):  # noqa: E501
        """New  # noqa: E501

        Register an order to sent to the market. This order will be sent to the market and executed according to the specifications. Something to be aware of: the response of this call might arrive after the order event from the realtime feed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orders_register_order_with_http_info(account_number, new_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: An account number to register the order. (required)
        :param NewOrderModel new_order: Specifications to be used for the order. (required)
        :return: OrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'new_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_register_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `orders_register_order`")  # noqa: E501
        # verify the required parameter 'new_order' is set
        if self.api_client.client_side_validation and ('new_order' not in params or
                                                       params['new_order'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_order` when calling `orders_register_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_order' in params:
            body_params = params['new_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountNumber}/orders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
