# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InstrumentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def instruments_get_bonds(self, account_number, type, **kwargs):  # noqa: E501
        """Bonds  # noqa: E501

        Get Bonds information. Provide a name for the Type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_bonds(account_number, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param str type: Name of the Bonds type (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_bonds_with_http_info(account_number, type, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_bonds_with_http_info(account_number, type, **kwargs)  # noqa: E501
            return data

    def instruments_get_bonds_with_http_info(self, account_number, type, **kwargs):  # noqa: E501
        """Bonds  # noqa: E501

        Get Bonds information. Provide a name for the Type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_bonds_with_http_info(account_number, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param str type: Name of the Bonds type (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'type', 'include_tick_sizes', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_bonds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `instruments_get_bonds`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `instruments_get_bonds`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_bonds`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_bonds`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_bonds`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `instruments_get_bonds`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_tick_sizes' in params:
            query_params.append(('includeTickSizes', params['include_tick_sizes']))  # noqa: E501
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instruments/bonds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstrumentsResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_certificates(self, account_number, **kwargs):  # noqa: E501
        """Certificates  # noqa: E501

        Get certificate information. Provide a name for the Exchange, when no name is specified, the default (SeDeX) will be used  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_certificates(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str exchange: Name of the Exchange, default is 'certificatesSeDeX'
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_certificates_with_http_info(account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_certificates_with_http_info(account_number, **kwargs)  # noqa: E501
            return data

    def instruments_get_certificates_with_http_info(self, account_number, **kwargs):  # noqa: E501
        """Certificates  # noqa: E501

        Get certificate information. Provide a name for the Exchange, when no name is specified, the default (SeDeX) will be used  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_certificates_with_http_info(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str exchange: Name of the Exchange, default is 'certificatesSeDeX'
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'include_tick_sizes', 'exchange', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_certificates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `instruments_get_certificates`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_certificates`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_certificates`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_certificates`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `instruments_get_certificates`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_tick_sizes' in params:
            query_params.append(('includeTickSizes', params['include_tick_sizes']))  # noqa: E501
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instruments/certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstrumentsResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_derivatives(self, account_number, **kwargs):  # noqa: E501
        """Derivatives  # noqa: E501

        Get the series for a derivatives class (options/futures). This endpoint can be used to get an option or future sheet.  If there are two classes with the same symbol, mic and currency but different contract size (due to a corporate action), there are two sheets in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_derivatives(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param str symbol: Selection on symbol.  Cannot be used in combination with 'UnderlyingInstrumentId'.
        :param str underlying_instrument_id: Selection on the ID of the underlying equity.  Cannot be used in combination with 'symbol'.
        :param str market_identification_code: Can be used in combination with symbol to specify the market.
        :param str currency: Can be used in combination with symbol to specify the currency.
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: DerivativesResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_derivatives_with_http_info(account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_derivatives_with_http_info(account_number, **kwargs)  # noqa: E501
            return data

    def instruments_get_derivatives_with_http_info(self, account_number, **kwargs):  # noqa: E501
        """Derivatives  # noqa: E501

        Get the series for a derivatives class (options/futures). This endpoint can be used to get an option or future sheet.  If there are two classes with the same symbol, mic and currency but different contract size (due to a corporate action), there are two sheets in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_derivatives_with_http_info(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param str symbol: Selection on symbol.  Cannot be used in combination with 'UnderlyingInstrumentId'.
        :param str underlying_instrument_id: Selection on the ID of the underlying equity.  Cannot be used in combination with 'symbol'.
        :param str market_identification_code: Can be used in combination with symbol to specify the market.
        :param str currency: Can be used in combination with symbol to specify the currency.
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: DerivativesResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'symbol', 'underlying_instrument_id', 'market_identification_code', 'currency', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_derivatives" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `instruments_get_derivatives`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_derivatives`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_derivatives`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_derivatives`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `instruments_get_derivatives`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'underlying_instrument_id' in params:
            query_params.append(('underlyingInstrumentId', params['underlying_instrument_id']))  # noqa: E501
        if 'market_identification_code' in params:
            query_params.append(('marketIdentificationCode', params['market_identification_code']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instruments/derivatives', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DerivativesResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_instrument(self, id, account_number, **kwargs):  # noqa: E501
        """Instrument info  # noqa: E501

        Get instrument information for a specific instrument. Multiple instruments can be retrieved if separated by comma, for example to get the instrument data from the positions (GET /instruments/{id1,id2}).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument(id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Ids of the equity to retrieve. If there are multiple ids, separate them by commas. (required)
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_instrument_with_http_info(id, account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_instrument_with_http_info(id, account_number, **kwargs)  # noqa: E501
            return data

    def instruments_get_instrument_with_http_info(self, id, account_number, **kwargs):  # noqa: E501
        """Instrument info  # noqa: E501

        Get instrument information for a specific instrument. Multiple instruments can be retrieved if separated by comma, for example to get the instrument data from the positions (GET /instruments/{id1,id2}).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instrument_with_http_info(id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Ids of the equity to retrieve. If there are multiple ids, separate them by commas. (required)
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'account_number', 'include_tick_sizes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_instrument" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instruments_get_instrument`")  # noqa: E501
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `instruments_get_instrument`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_instrument`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_instrument`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_instrument`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include_tick_sizes' in params:
            query_params.append(('includeTickSizes', params['include_tick_sizes']))  # noqa: E501
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instruments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstrumentsResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_instruments(self, account_number, **kwargs):  # noqa: E501
        """Find instrument  # noqa: E501

        Get instrument information. Parameter 'SearchText', or 'Isin' is required. 'Type' is optional, 'Mic' can only be used together with 'Isin'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instruments(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str instrument_type: Additional optional filter on instrument type. Cannot be used alone.
        :param str search_text: Case insensitive search text, minimum length 2. Cannot be used in combination with 'Isin'.
        :param str isin: Selection on isinCode. Cannot be used in combination with 'SearchText'.
        :param str mic: Additional optional selection on Market Identification Code, to be used only in combination with 'Isin'
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_instruments_with_http_info(account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_instruments_with_http_info(account_number, **kwargs)  # noqa: E501
            return data

    def instruments_get_instruments_with_http_info(self, account_number, **kwargs):  # noqa: E501
        """Find instrument  # noqa: E501

        Get instrument information. Parameter 'SearchText', or 'Isin' is required. 'Type' is optional, 'Mic' can only be used together with 'Isin'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_instruments_with_http_info(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str instrument_type: Additional optional filter on instrument type. Cannot be used alone.
        :param str search_text: Case insensitive search text, minimum length 2. Cannot be used in combination with 'Isin'.
        :param str isin: Selection on isinCode. Cannot be used in combination with 'SearchText'.
        :param str mic: Additional optional selection on Market Identification Code, to be used only in combination with 'Isin'
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'include_tick_sizes', 'instrument_type', 'search_text', 'isin', 'mic', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_instruments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `instruments_get_instruments`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_instruments`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_instruments`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_instruments`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('search_text' in params and
                                                       len(params['search_text']) > 30):
            raise ValueError("Invalid value for parameter `search_text` when calling `instruments_get_instruments`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and ('search_text' in params and
                                                       len(params['search_text']) < 2):
            raise ValueError("Invalid value for parameter `search_text` when calling `instruments_get_instruments`, length must be greater than or equal to `2`")  # noqa: E501
        if self.api_client.client_side_validation and ('isin' in params and
                                                       len(params['isin']) > 15):
            raise ValueError("Invalid value for parameter `isin` when calling `instruments_get_instruments`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('isin' in params and
                                                       len(params['isin']) < 5):
            raise ValueError("Invalid value for parameter `isin` when calling `instruments_get_instruments`, length must be greater than or equal to `5`")  # noqa: E501
        if self.api_client.client_side_validation and ('isin' in params and not re.search(r'([A-Z]{2})([A-Z0-9]{5,})', params['isin'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `isin` when calling `instruments_get_instruments`, must conform to the pattern `/([A-Z]{2})([A-Z0-9]{5,})/`")  # noqa: E501
        if self.api_client.client_side_validation and ('mic' in params and
                                                       len(params['mic']) > 4):
            raise ValueError("Invalid value for parameter `mic` when calling `instruments_get_instruments`, length must be less than or equal to `4`")  # noqa: E501
        if self.api_client.client_side_validation and ('mic' in params and
                                                       len(params['mic']) < 1):
            raise ValueError("Invalid value for parameter `mic` when calling `instruments_get_instruments`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `instruments_get_instruments`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_tick_sizes' in params:
            query_params.append(('includeTickSizes', params['include_tick_sizes']))  # noqa: E501
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'instrument_type' in params:
            query_params.append(('instrumentType', params['instrument_type']))  # noqa: E501
        if 'search_text' in params:
            query_params.append(('searchText', params['search_text']))  # noqa: E501
        if 'isin' in params:
            query_params.append(('isin', params['isin']))  # noqa: E501
        if 'mic' in params:
            query_params.append(('mic', params['mic']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instruments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstrumentsResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_leveraged_products(self, account_number, **kwargs):  # noqa: E501
        """Leveraged products  # noqa: E501

        Get instrument information for leveraged products like Turbo's. Provide one or more filter criteria in the query parameters. When a filter value is not specified, the default value is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_leveraged_products(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str publisher: Name of the publishing company, default is 'binckBank'
        :param str long_short: Long or short, default is 'all' (both long and short)
        :param str category: Category, default is 'indices'
        :param str type: Specifies type (Turbo or XL), default is 'all' (both Turbo and XL)
        :param float stoploss_min: Specifies minimum stop loss
        :param float stoploss_max: Specifies maximum stop loss
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_leveraged_products_with_http_info(account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_leveraged_products_with_http_info(account_number, **kwargs)  # noqa: E501
            return data

    def instruments_get_leveraged_products_with_http_info(self, account_number, **kwargs):  # noqa: E501
        """Leveraged products  # noqa: E501

        Get instrument information for leveraged products like Turbo's. Provide one or more filter criteria in the query parameters. When a filter value is not specified, the default value is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_leveraged_products_with_http_info(account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str publisher: Name of the publishing company, default is 'binckBank'
        :param str long_short: Long or short, default is 'all' (both long and short)
        :param str category: Category, default is 'indices'
        :param str type: Specifies type (Turbo or XL), default is 'all' (both Turbo and XL)
        :param float stoploss_min: Specifies minimum stop loss
        :param float stoploss_max: Specifies maximum stop loss
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'include_tick_sizes', 'publisher', 'long_short', 'category', 'type', 'stoploss_min', 'stoploss_max', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_leveraged_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `instruments_get_leveraged_products`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_leveraged_products`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_leveraged_products`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_leveraged_products`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `instruments_get_leveraged_products`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_tick_sizes' in params:
            query_params.append(('includeTickSizes', params['include_tick_sizes']))  # noqa: E501
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'publisher' in params:
            query_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'long_short' in params:
            query_params.append(('longShort', params['long_short']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'stoploss_min' in params:
            query_params.append(('stoplossMin', params['stoploss_min']))  # noqa: E501
        if 'stoploss_max' in params:
            query_params.append(('stoplossMax', params['stoploss_max']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instruments/leveragedproducts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstrumentsResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_get_list_contents(self, id, account_number, **kwargs):  # noqa: E501
        """Instrument list  # noqa: E501

        Get a predefined list of instruments. List are a fast way to retrieve a group of instruments. Count in the response might be an 'educated guess'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_list_contents(id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the list (required)
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str mic: If specified, the response contains only instruments with this MarketIdentificationCode
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_get_list_contents_with_http_info(id, account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_get_list_contents_with_http_info(id, account_number, **kwargs)  # noqa: E501
            return data

    def instruments_get_list_contents_with_http_info(self, id, account_number, **kwargs):  # noqa: E501
        """Instrument list  # noqa: E501

        Get a predefined list of instruments. List are a fast way to retrieve a group of instruments. Count in the response might be an 'educated guess'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_get_list_contents_with_http_info(id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the list (required)
        :param str account_number: Mandatory account number (required)
        :param bool include_tick_sizes: When set to true, the response will include a table with the TickSizes for the instrument, default = false
        :param str mic: If specified, the response contains only instruments with this MarketIdentificationCode
        :param str range: Paging parameter to retrieve a subset of the complete collection. Format is &lt;offset&gt;-&lt;limit&gt;.   Both values are an offset from the first entry of the complete collection. The first entry has offset '0'.  (e.g. 12-21)
        :return: InstrumentsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'account_number', 'include_tick_sizes', 'mic', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_get_list_contents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instruments_get_list_contents`")  # noqa: E501
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `instruments_get_list_contents`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_list_contents`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_list_contents`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_get_list_contents`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        if self.api_client.client_side_validation and ('range' in params and not re.search(r'[0-9]+-[0-9]*', params['range'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `range` when calling `instruments_get_list_contents`, must conform to the pattern `/[0-9]+-[0-9]*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include_tick_sizes' in params:
            query_params.append(('includeTickSizes', params['include_tick_sizes']))  # noqa: E501
        if 'mic' in params:
            query_params.append(('mic', params['mic']))  # noqa: E501
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instruments/lists/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstrumentsResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_read_kid_document(self, id, kid_id, account_number, **kwargs):  # noqa: E501
        """KID document  # noqa: E501

        Get KID document. The document is a PDF file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_read_kid_document(id, kid_id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of the equity to retrieve. (required)
        :param str kid_id: Id of the Kid document. (required)
        :param str account_number: Mandatory account number (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_read_kid_document_with_http_info(id, kid_id, account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_read_kid_document_with_http_info(id, kid_id, account_number, **kwargs)  # noqa: E501
            return data

    def instruments_read_kid_document_with_http_info(self, id, kid_id, account_number, **kwargs):  # noqa: E501
        """KID document  # noqa: E501

        Get KID document. The document is a PDF file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_read_kid_document_with_http_info(id, kid_id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of the equity to retrieve. (required)
        :param str kid_id: Id of the Kid document. (required)
        :param str account_number: Mandatory account number (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'kid_id', 'account_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_read_kid_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instruments_read_kid_document`")  # noqa: E501
        # verify the required parameter 'kid_id' is set
        if self.api_client.client_side_validation and ('kid_id' not in params or
                                                       params['kid_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `kid_id` when calling `instruments_read_kid_document`")  # noqa: E501
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `instruments_read_kid_document`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_read_kid_document`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_read_kid_document`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_read_kid_document`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'kid_id' in params:
            path_params['kidId'] = params['kid_id']  # noqa: E501

        query_params = []
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['attachment/PDF'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instruments/{id}/kid/{kidId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instruments_search_kid_document(self, id, account_number, **kwargs):  # noqa: E501
        """KID availability  # noqa: E501

        Get KID document information for an instrument. Use this for instruments which have the isKidApplicable flag set to true. This endpoint searches for documentation. Still, it might be the case there is no documentation for a specific instrument, in the language of the customer. It can also be the case there are multiple documents for a certain instrument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_search_kid_document(id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of the instrument. (required)
        :param str account_number: Mandatory account number (required)
        :return: KidResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instruments_search_kid_document_with_http_info(id, account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.instruments_search_kid_document_with_http_info(id, account_number, **kwargs)  # noqa: E501
            return data

    def instruments_search_kid_document_with_http_info(self, id, account_number, **kwargs):  # noqa: E501
        """KID availability  # noqa: E501

        Get KID document information for an instrument. Use this for instruments which have the isKidApplicable flag set to true. This endpoint searches for documentation. Still, it might be the case there is no documentation for a specific instrument, in the language of the customer. It can also be the case there are multiple documents for a certain instrument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instruments_search_kid_document_with_http_info(id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Id of the instrument. (required)
        :param str account_number: Mandatory account number (required)
        :return: KidResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'account_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instruments_search_kid_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instruments_search_kid_document`")  # noqa: E501
        # verify the required parameter 'account_number' is set
        if self.api_client.client_side_validation and ('account_number' not in params or
                                                       params['account_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_number` when calling `instruments_search_kid_document`")  # noqa: E501

        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) > 15):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_search_kid_document`, length must be less than or equal to `15`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and
                                                       len(params['account_number']) < 3):
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_search_kid_document`, length must be greater than or equal to `3`")  # noqa: E501
        if self.api_client.client_side_validation and ('account_number' in params and not re.search(r'[0-9a-zA-Z]{3,}', params['account_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `account_number` when calling `instruments_search_kid_document`, must conform to the pattern `/[0-9a-zA-Z]{3,}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instruments/{id}/kid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KidResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
