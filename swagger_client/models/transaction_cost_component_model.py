# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TransactionCostComponentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cost': 'float',
        'currency': 'str',
        'cost_type_category': 'str',
        'amount_percentage': 'float'
    }

    attribute_map = {
        'cost': 'cost',
        'currency': 'currency',
        'cost_type_category': 'costTypeCategory',
        'amount_percentage': 'amountPercentage'
    }

    def __init__(self, cost=None, currency=None, cost_type_category=None, amount_percentage=None, _configuration=None):  # noqa: E501
        """TransactionCostComponentModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cost = None
        self._currency = None
        self._cost_type_category = None
        self._amount_percentage = None
        self.discriminator = None

        if cost is not None:
            self.cost = cost
        if currency is not None:
            self.currency = currency
        if cost_type_category is not None:
            self.cost_type_category = cost_type_category
        if amount_percentage is not None:
            self.amount_percentage = amount_percentage

    @property
    def cost(self):
        """Gets the cost of this TransactionCostComponentModel.  # noqa: E501

        Amount for the costs  # noqa: E501

        :return: The cost of this TransactionCostComponentModel.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this TransactionCostComponentModel.

        Amount for the costs  # noqa: E501

        :param cost: The cost of this TransactionCostComponentModel.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def currency(self):
        """Gets the currency of this TransactionCostComponentModel.  # noqa: E501

        Currency of these costs  # noqa: E501

        :return: The currency of this TransactionCostComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TransactionCostComponentModel.

        Currency of these costs  # noqa: E501

        :param currency: The currency of this TransactionCostComponentModel.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def cost_type_category(self):
        """Gets the cost_type_category of this TransactionCostComponentModel.  # noqa: E501

        Costs category  # noqa: E501

        :return: The cost_type_category of this TransactionCostComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._cost_type_category

    @cost_type_category.setter
    def cost_type_category(self, cost_type_category):
        """Sets the cost_type_category of this TransactionCostComponentModel.

        Costs category  # noqa: E501

        :param cost_type_category: The cost_type_category of this TransactionCostComponentModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["commission", "stampDuty", "capitalGainTax", "capitalIncomeTax", "exchangeTax", "withHoldingTax", "stampDutyBE", "vAT", "securitiesFee", "socialTax", "incomeTax", "sRDExtensionCommission", "sRDDifference", "sRDSettlement", "sRDCompensationPayment", "sRDCommission", "speculationTax", "assetManagementFee", "currencyExchangeCost"]  # noqa: E501
        if (self._configuration.client_side_validation and
                cost_type_category not in allowed_values):
            raise ValueError(
                "Invalid value for `cost_type_category` ({0}), must be one of {1}"  # noqa: E501
                .format(cost_type_category, allowed_values)
            )

        self._cost_type_category = cost_type_category

    @property
    def amount_percentage(self):
        """Gets the amount_percentage of this TransactionCostComponentModel.  # noqa: E501

        Percentage of the transaction amount  # noqa: E501

        :return: The amount_percentage of this TransactionCostComponentModel.  # noqa: E501
        :rtype: float
        """
        return self._amount_percentage

    @amount_percentage.setter
    def amount_percentage(self, amount_percentage):
        """Sets the amount_percentage of this TransactionCostComponentModel.

        Percentage of the transaction amount  # noqa: E501

        :param amount_percentage: The amount_percentage of this TransactionCostComponentModel.  # noqa: E501
        :type: float
        """

        self._amount_percentage = amount_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionCostComponentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionCostComponentModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionCostComponentModel):
            return True

        return self.to_dict() != other.to_dict()
