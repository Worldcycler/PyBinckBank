# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LeveragedProductsQueryParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'publisher': 'str',
        'long_short': 'str',
        'category': 'str',
        'type': 'str',
        'stoploss_min': 'float',
        'stoploss_max': 'float'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'publisher': 'publisher',
        'long_short': 'longShort',
        'category': 'category',
        'type': 'type',
        'stoploss_min': 'stoplossMin',
        'stoploss_max': 'stoplossMax'
    }

    def __init__(self, account_number=None, publisher=None, long_short=None, category=None, type=None, stoploss_min=None, stoploss_max=None, _configuration=None):  # noqa: E501
        """LeveragedProductsQueryParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_number = None
        self._publisher = None
        self._long_short = None
        self._category = None
        self._type = None
        self._stoploss_min = None
        self._stoploss_max = None
        self.discriminator = None

        self.account_number = account_number
        if publisher is not None:
            self.publisher = publisher
        if long_short is not None:
            self.long_short = long_short
        if category is not None:
            self.category = category
        if type is not None:
            self.type = type
        if stoploss_min is not None:
            self.stoploss_min = stoploss_min
        if stoploss_max is not None:
            self.stoploss_max = stoploss_max

    @property
    def account_number(self):
        """Gets the account_number of this LeveragedProductsQueryParams.  # noqa: E501

        Mandatory account number  # noqa: E501

        :return: The account_number of this LeveragedProductsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this LeveragedProductsQueryParams.

        Mandatory account number  # noqa: E501

        :param account_number: The account_number of this LeveragedProductsQueryParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_number is not None and len(account_number) > 15):
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_number is not None and len(account_number) < 3):
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `3`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_number is not None and not re.search(r'[0-9a-zA-Z]{3,}', account_number)):  # noqa: E501
            raise ValueError(r"Invalid value for `account_number`, must be a follow pattern or equal to `/[0-9a-zA-Z]{3,}/`")  # noqa: E501

        self._account_number = account_number

    @property
    def publisher(self):
        """Gets the publisher of this LeveragedProductsQueryParams.  # noqa: E501

        Name of the publishing company, default is 'binckBank'  # noqa: E501

        :return: The publisher of this LeveragedProductsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this LeveragedProductsQueryParams.

        Name of the publishing company, default is 'binckBank'  # noqa: E501

        :param publisher: The publisher of this LeveragedProductsQueryParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "binckBank", "bnpParibas", "citigroup", "commerzBank", "goldmanSachs", "ing"]  # noqa: E501
        if (self._configuration.client_side_validation and
                publisher not in allowed_values):
            raise ValueError(
                "Invalid value for `publisher` ({0}), must be one of {1}"  # noqa: E501
                .format(publisher, allowed_values)
            )

        self._publisher = publisher

    @property
    def long_short(self):
        """Gets the long_short of this LeveragedProductsQueryParams.  # noqa: E501

        Long or short, default is 'all' (both long and short)  # noqa: E501

        :return: The long_short of this LeveragedProductsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._long_short

    @long_short.setter
    def long_short(self, long_short):
        """Sets the long_short of this LeveragedProductsQueryParams.

        Long or short, default is 'all' (both long and short)  # noqa: E501

        :param long_short: The long_short of this LeveragedProductsQueryParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "long", "short"]  # noqa: E501
        if (self._configuration.client_side_validation and
                long_short not in allowed_values):
            raise ValueError(
                "Invalid value for `long_short` ({0}), must be one of {1}"  # noqa: E501
                .format(long_short, allowed_values)
            )

        self._long_short = long_short

    @property
    def category(self):
        """Gets the category of this LeveragedProductsQueryParams.  # noqa: E501

        Category, default is 'indices'  # noqa: E501

        :return: The category of this LeveragedProductsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this LeveragedProductsQueryParams.

        Category, default is 'indices'  # noqa: E501

        :param category: The category of this LeveragedProductsQueryParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["bonds", "commodities", "currencies", "equities", "indices"]  # noqa: E501
        if (self._configuration.client_side_validation and
                category not in allowed_values):
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def type(self):
        """Gets the type of this LeveragedProductsQueryParams.  # noqa: E501

        Specifies type (Turbo or XL), default is 'all' (both Turbo and XL)  # noqa: E501

        :return: The type of this LeveragedProductsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LeveragedProductsQueryParams.

        Specifies type (Turbo or XL), default is 'all' (both Turbo and XL)  # noqa: E501

        :param type: The type of this LeveragedProductsQueryParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "regular", "xl"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def stoploss_min(self):
        """Gets the stoploss_min of this LeveragedProductsQueryParams.  # noqa: E501

        Specifies minimum stop loss  # noqa: E501

        :return: The stoploss_min of this LeveragedProductsQueryParams.  # noqa: E501
        :rtype: float
        """
        return self._stoploss_min

    @stoploss_min.setter
    def stoploss_min(self, stoploss_min):
        """Sets the stoploss_min of this LeveragedProductsQueryParams.

        Specifies minimum stop loss  # noqa: E501

        :param stoploss_min: The stoploss_min of this LeveragedProductsQueryParams.  # noqa: E501
        :type: float
        """

        self._stoploss_min = stoploss_min

    @property
    def stoploss_max(self):
        """Gets the stoploss_max of this LeveragedProductsQueryParams.  # noqa: E501

        Specifies maximum stop loss  # noqa: E501

        :return: The stoploss_max of this LeveragedProductsQueryParams.  # noqa: E501
        :rtype: float
        """
        return self._stoploss_max

    @stoploss_max.setter
    def stoploss_max(self, stoploss_max):
        """Sets the stoploss_max of this LeveragedProductsQueryParams.

        Specifies maximum stop loss  # noqa: E501

        :param stoploss_max: The stoploss_max of this LeveragedProductsQueryParams.  # noqa: E501
        :type: float
        """

        self._stoploss_max = stoploss_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeveragedProductsQueryParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeveragedProductsQueryParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LeveragedProductsQueryParams):
            return True

        return self.to_dict() != other.to_dict()
