# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DerivativesResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'derivatives_collection': 'DerivativesCollectionModel',
        'paging': 'PagingModel',
        'count': 'int',
        'metadata': 'MetadataModel'
    }

    attribute_map = {
        'derivatives_collection': 'derivativesCollection',
        'paging': 'paging',
        'count': 'count',
        'metadata': 'metadata'
    }

    def __init__(self, derivatives_collection=None, paging=None, count=None, metadata=None, _configuration=None):  # noqa: E501
        """DerivativesResponseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._derivatives_collection = None
        self._paging = None
        self._count = None
        self._metadata = None
        self.discriminator = None

        if derivatives_collection is not None:
            self.derivatives_collection = derivatives_collection
        if paging is not None:
            self.paging = paging
        self.count = count
        self.metadata = metadata

    @property
    def derivatives_collection(self):
        """Gets the derivatives_collection of this DerivativesResponseModel.  # noqa: E501

        Derivative classes information  # noqa: E501

        :return: The derivatives_collection of this DerivativesResponseModel.  # noqa: E501
        :rtype: DerivativesCollectionModel
        """
        return self._derivatives_collection

    @derivatives_collection.setter
    def derivatives_collection(self, derivatives_collection):
        """Sets the derivatives_collection of this DerivativesResponseModel.

        Derivative classes information  # noqa: E501

        :param derivatives_collection: The derivatives_collection of this DerivativesResponseModel.  # noqa: E501
        :type: DerivativesCollectionModel
        """

        self._derivatives_collection = derivatives_collection

    @property
    def paging(self):
        """Gets the paging of this DerivativesResponseModel.  # noqa: E501

        Paging information  # noqa: E501

        :return: The paging of this DerivativesResponseModel.  # noqa: E501
        :rtype: PagingModel
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this DerivativesResponseModel.

        Paging information  # noqa: E501

        :param paging: The paging of this DerivativesResponseModel.  # noqa: E501
        :type: PagingModel
        """

        self._paging = paging

    @property
    def count(self):
        """Gets the count of this DerivativesResponseModel.  # noqa: E501

        Number of entries in the complete collection  # noqa: E501

        :return: The count of this DerivativesResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DerivativesResponseModel.

        Number of entries in the complete collection  # noqa: E501

        :param count: The count of this DerivativesResponseModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def metadata(self):
        """Gets the metadata of this DerivativesResponseModel.  # noqa: E501

        API response meta data  # noqa: E501

        :return: The metadata of this DerivativesResponseModel.  # noqa: E501
        :rtype: MetadataModel
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DerivativesResponseModel.

        API response meta data  # noqa: E501

        :param metadata: The metadata of this DerivativesResponseModel.  # noqa: E501
        :type: MetadataModel
        """
        if self._configuration.client_side_validation and metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DerivativesResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DerivativesResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DerivativesResponseModel):
            return True

        return self.to_dict() != other.to_dict()
