# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OrderCostsForSubCategoryModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'percentage': 'float',
        'value_in_euro': 'float',
        'extra_info': 'str'
    }

    attribute_map = {
        'name': 'name',
        'percentage': 'percentage',
        'value_in_euro': 'valueInEuro',
        'extra_info': 'extraInfo'
    }

    def __init__(self, name=None, percentage=None, value_in_euro=None, extra_info=None, _configuration=None):  # noqa: E501
        """OrderCostsForSubCategoryModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._percentage = None
        self._value_in_euro = None
        self._extra_info = None
        self.discriminator = None

        self.name = name
        if percentage is not None:
            self.percentage = percentage
        if value_in_euro is not None:
            self.value_in_euro = value_in_euro
        if extra_info is not None:
            self.extra_info = extra_info

    @property
    def name(self):
        """Gets the name of this OrderCostsForSubCategoryModel.  # noqa: E501

        Order category name, translated in the language of the customer  # noqa: E501

        :return: The name of this OrderCostsForSubCategoryModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderCostsForSubCategoryModel.

        Order category name, translated in the language of the customer  # noqa: E501

        :param name: The name of this OrderCostsForSubCategoryModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this OrderCostsForSubCategoryModel.  # noqa: E501

        Percentage representation of the cost category  # noqa: E501

        :return: The percentage of this OrderCostsForSubCategoryModel.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this OrderCostsForSubCategoryModel.

        Percentage representation of the cost category  # noqa: E501

        :param percentage: The percentage of this OrderCostsForSubCategoryModel.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def value_in_euro(self):
        """Gets the value_in_euro of this OrderCostsForSubCategoryModel.  # noqa: E501

        Amount in EUR of costs for the category  # noqa: E501

        :return: The value_in_euro of this OrderCostsForSubCategoryModel.  # noqa: E501
        :rtype: float
        """
        return self._value_in_euro

    @value_in_euro.setter
    def value_in_euro(self, value_in_euro):
        """Sets the value_in_euro of this OrderCostsForSubCategoryModel.

        Amount in EUR of costs for the category  # noqa: E501

        :param value_in_euro: The value_in_euro of this OrderCostsForSubCategoryModel.  # noqa: E501
        :type: float
        """

        self._value_in_euro = value_in_euro

    @property
    def extra_info(self):
        """Gets the extra_info of this OrderCostsForSubCategoryModel.  # noqa: E501

        In case of null values for ValueInEuros / percentage, ExtraInfo will be be provided  # noqa: E501

        :return: The extra_info of this OrderCostsForSubCategoryModel.  # noqa: E501
        :rtype: str
        """
        return self._extra_info

    @extra_info.setter
    def extra_info(self, extra_info):
        """Sets the extra_info of this OrderCostsForSubCategoryModel.

        In case of null values for ValueInEuros / percentage, ExtraInfo will be be provided  # noqa: E501

        :param extra_info: The extra_info of this OrderCostsForSubCategoryModel.  # noqa: E501
        :type: str
        """

        self._extra_info = extra_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderCostsForSubCategoryModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderCostsForSubCategoryModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderCostsForSubCategoryModel):
            return True

        return self.to_dict() != other.to_dict()
