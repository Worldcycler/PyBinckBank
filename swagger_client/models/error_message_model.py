# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ErrorMessageModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'developer_message': 'str',
        'end_user_message': 'str',
        'error_code': 'str',
        'error_id': 'str'
    }

    attribute_map = {
        'developer_message': 'developerMessage',
        'end_user_message': 'endUserMessage',
        'error_code': 'errorCode',
        'error_id': 'errorId'
    }

    def __init__(self, developer_message=None, end_user_message=None, error_code=None, error_id=None, _configuration=None):  # noqa: E501
        """ErrorMessageModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._developer_message = None
        self._end_user_message = None
        self._error_code = None
        self._error_id = None
        self.discriminator = None

        self.developer_message = developer_message
        self.end_user_message = end_user_message
        self.error_code = error_code
        self.error_id = error_id

    @property
    def developer_message(self):
        """Gets the developer_message of this ErrorMessageModel.  # noqa: E501

        The message that should be used by the developer  # noqa: E501

        :return: The developer_message of this ErrorMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._developer_message

    @developer_message.setter
    def developer_message(self, developer_message):
        """Sets the developer_message of this ErrorMessageModel.

        The message that should be used by the developer  # noqa: E501

        :param developer_message: The developer_message of this ErrorMessageModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and developer_message is None:
            raise ValueError("Invalid value for `developer_message`, must not be `None`")  # noqa: E501

        self._developer_message = developer_message

    @property
    def end_user_message(self):
        """Gets the end_user_message of this ErrorMessageModel.  # noqa: E501

        The message that can be shown to the end user  # noqa: E501

        :return: The end_user_message of this ErrorMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._end_user_message

    @end_user_message.setter
    def end_user_message(self, end_user_message):
        """Sets the end_user_message of this ErrorMessageModel.

        The message that can be shown to the end user  # noqa: E501

        :param end_user_message: The end_user_message of this ErrorMessageModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and end_user_message is None:
            raise ValueError("Invalid value for `end_user_message`, must not be `None`")  # noqa: E501

        self._end_user_message = end_user_message

    @property
    def error_code(self):
        """Gets the error_code of this ErrorMessageModel.  # noqa: E501

        The error code  # noqa: E501

        :return: The error_code of this ErrorMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ErrorMessageModel.

        The error code  # noqa: E501

        :param error_code: The error_code of this ErrorMessageModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501

        self._error_code = error_code

    @property
    def error_id(self):
        """Gets the error_id of this ErrorMessageModel.  # noqa: E501

        The id of the error  # noqa: E501

        :return: The error_id of this ErrorMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """Sets the error_id of this ErrorMessageModel.

        The id of the error  # noqa: E501

        :param error_id: The error_id of this ErrorMessageModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and error_id is None:
            raise ValueError("Invalid value for `error_id`, must not be `None`")  # noqa: E501
        allowed_values = ["initial", "unknown", "notFound", "conversionError", "functionalError", "validationError", "orderCancellationNotPossible", "orderModificationRefused", "orderNotValid", "logonFailure", "mediumBlocked", "noAuthorization", "noMatchingAccountInfoFound", "sessionExpiredMaxDuration", "sessionExpiredMaxInactivity", "sessionInvalid", "faildToCreateAmSession", "orderNumberIsIncorrect", "hashIdError", "productNotEnabled", "sessionMaxActivityExceeded", "tooManyRequests", "notImplemented"]  # noqa: E501
        if (self._configuration.client_side_validation and
                error_id not in allowed_values):
            raise ValueError(
                "Invalid value for `error_id` ({0}), must be one of {1}"  # noqa: E501
                .format(error_id, allowed_values)
            )

        self._error_id = error_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorMessageModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorMessageModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErrorMessageModel):
            return True

        return self.to_dict() != other.to_dict()
