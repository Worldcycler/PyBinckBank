# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PerformancesQueryParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'on_position': 'bool'
    }

    attribute_map = {
        'on_position': 'onPosition'
    }

    def __init__(self, on_position=None, _configuration=None):  # noqa: E501
        """PerformancesQueryParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._on_position = None
        self.discriminator = None

        if on_position is not None:
            self.on_position = on_position

    @property
    def on_position(self):
        """Gets the on_position of this PerformancesQueryParams.  # noqa: E501

        Performances can be calculated on position level or on instrument level. When 'onPosition' set to true,  the performance of all individual instruments will be reported. If set to false, the performance of   derivative instruments is included in the performance of the underlying instrument.  # noqa: E501

        :return: The on_position of this PerformancesQueryParams.  # noqa: E501
        :rtype: bool
        """
        return self._on_position

    @on_position.setter
    def on_position(self, on_position):
        """Sets the on_position of this PerformancesQueryParams.

        Performances can be calculated on position level or on instrument level. When 'onPosition' set to true,  the performance of all individual instruments will be reported. If set to false, the performance of   derivative instruments is included in the performance of the underlying instrument.  # noqa: E501

        :param on_position: The on_position of this PerformancesQueryParams.  # noqa: E501
        :type: bool
        """

        self._on_position = on_position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PerformancesQueryParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformancesQueryParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PerformancesQueryParams):
            return True

        return self.to_dict() != other.to_dict()
