# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OrderModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'int',
        'instrument': 'InstrumentBriefModel',
        'type': 'str',
        'status_history': 'list[StatusHistory]',
        'currency': 'str',
        'duration': 'str',
        'line': 'int',
        'side': 'str',
        'executed_quantity': 'float',
        'limit_price': 'float',
        'average_price': 'float',
        'quantity': 'float',
        'expiration_date': 'datetime',
        'last_status': 'str',
        'last_status_date_time': 'datetime',
        'stop_price': 'float',
        'fixing_price': 'float',
        'condition': 'str',
        'reference_id': 'str'
    }

    attribute_map = {
        'number': 'number',
        'instrument': 'instrument',
        'type': 'type',
        'status_history': 'statusHistory',
        'currency': 'currency',
        'duration': 'duration',
        'line': 'line',
        'side': 'side',
        'executed_quantity': 'executedQuantity',
        'limit_price': 'limitPrice',
        'average_price': 'averagePrice',
        'quantity': 'quantity',
        'expiration_date': 'expirationDate',
        'last_status': 'lastStatus',
        'last_status_date_time': 'lastStatusDateTime',
        'stop_price': 'stopPrice',
        'fixing_price': 'fixingPrice',
        'condition': 'condition',
        'reference_id': 'referenceId'
    }

    def __init__(self, number=None, instrument=None, type=None, status_history=None, currency=None, duration=None, line=None, side=None, executed_quantity=None, limit_price=None, average_price=None, quantity=None, expiration_date=None, last_status=None, last_status_date_time=None, stop_price=None, fixing_price=None, condition=None, reference_id=None, _configuration=None):  # noqa: E501
        """OrderModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._number = None
        self._instrument = None
        self._type = None
        self._status_history = None
        self._currency = None
        self._duration = None
        self._line = None
        self._side = None
        self._executed_quantity = None
        self._limit_price = None
        self._average_price = None
        self._quantity = None
        self._expiration_date = None
        self._last_status = None
        self._last_status_date_time = None
        self._stop_price = None
        self._fixing_price = None
        self._condition = None
        self._reference_id = None
        self.discriminator = None

        self.number = number
        self.instrument = instrument
        self.type = type
        if status_history is not None:
            self.status_history = status_history
        self.currency = currency
        self.duration = duration
        if line is not None:
            self.line = line
        if side is not None:
            self.side = side
        if executed_quantity is not None:
            self.executed_quantity = executed_quantity
        if limit_price is not None:
            self.limit_price = limit_price
        if average_price is not None:
            self.average_price = average_price
        self.quantity = quantity
        if expiration_date is not None:
            self.expiration_date = expiration_date
        self.last_status = last_status
        self.last_status_date_time = last_status_date_time
        if stop_price is not None:
            self.stop_price = stop_price
        if fixing_price is not None:
            self.fixing_price = fixing_price
        if condition is not None:
            self.condition = condition
        if reference_id is not None:
            self.reference_id = reference_id

    @property
    def number(self):
        """Gets the number of this OrderModel.  # noqa: E501

        The identification of the order  # noqa: E501

        :return: The number of this OrderModel.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OrderModel.

        The identification of the order  # noqa: E501

        :param number: The number of this OrderModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def instrument(self):
        """Gets the instrument of this OrderModel.  # noqa: E501

        Attributes of the financial instrument ordered  # noqa: E501

        :return: The instrument of this OrderModel.  # noqa: E501
        :rtype: InstrumentBriefModel
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this OrderModel.

        Attributes of the financial instrument ordered  # noqa: E501

        :param instrument: The instrument of this OrderModel.  # noqa: E501
        :type: InstrumentBriefModel
        """
        if self._configuration.client_side_validation and instrument is None:
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501

        self._instrument = instrument

    @property
    def type(self):
        """Gets the type of this OrderModel.  # noqa: E501

        The price type of the order  # noqa: E501

        :return: The type of this OrderModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderModel.

        The price type of the order  # noqa: E501

        :param type: The type of this OrderModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["limit", "market", "stop", "stopLimit", "allOrNone"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status_history(self):
        """Gets the status_history of this OrderModel.  # noqa: E501

        Status history of the order, populated when requested with \"includeStatusHistory != false\"  # noqa: E501

        :return: The status_history of this OrderModel.  # noqa: E501
        :rtype: list[StatusHistory]
        """
        return self._status_history

    @status_history.setter
    def status_history(self, status_history):
        """Sets the status_history of this OrderModel.

        Status history of the order, populated when requested with \"includeStatusHistory != false\"  # noqa: E501

        :param status_history: The status_history of this OrderModel.  # noqa: E501
        :type: list[StatusHistory]
        """

        self._status_history = status_history

    @property
    def currency(self):
        """Gets the currency of this OrderModel.  # noqa: E501

        The currency of the security  # noqa: E501

        :return: The currency of this OrderModel.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderModel.

        The currency of the security  # noqa: E501

        :param currency: The currency of this OrderModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def duration(self):
        """Gets the duration of this OrderModel.  # noqa: E501

        Specifies the term for which the order is in effect  # noqa: E501

        :return: The duration of this OrderModel.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this OrderModel.

        Specifies the term for which the order is in effect  # noqa: E501

        :param duration: The duration of this OrderModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501
        allowed_values = ["fillOrKill", "immediateOrCancel", "day", "goodTillCancelled", "goodTillDate", "atTheOpening", "goodTillCrossing"]  # noqa: E501
        if (self._configuration.client_side_validation and
                duration not in allowed_values):
            raise ValueError(
                "Invalid value for `duration` ({0}), must be one of {1}"  # noqa: E501
                .format(duration, allowed_values)
            )

        self._duration = duration

    @property
    def line(self):
        """Gets the line of this OrderModel.  # noqa: E501

        Line number of this order in case of a multi line order  # noqa: E501

        :return: The line of this OrderModel.  # noqa: E501
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this OrderModel.

        Line number of this order in case of a multi line order  # noqa: E501

        :param line: The line of this OrderModel.  # noqa: E501
        :type: int
        """

        self._line = line

    @property
    def side(self):
        """Gets the side of this OrderModel.  # noqa: E501

        Buy or sell - not available when bid (IPO)  # noqa: E501

        :return: The side of this OrderModel.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderModel.

        Buy or sell - not available when bid (IPO)  # noqa: E501

        :param side: The side of this OrderModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if (self._configuration.client_side_validation and
                side not in allowed_values):
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def executed_quantity(self):
        """Gets the executed_quantity of this OrderModel.  # noqa: E501

        Number of executed instruments (equities), nominal value (odds) or number of contracts (options and futures)  # noqa: E501

        :return: The executed_quantity of this OrderModel.  # noqa: E501
        :rtype: float
        """
        return self._executed_quantity

    @executed_quantity.setter
    def executed_quantity(self, executed_quantity):
        """Sets the executed_quantity of this OrderModel.

        Number of executed instruments (equities), nominal value (odds) or number of contracts (options and futures)  # noqa: E501

        :param executed_quantity: The executed_quantity of this OrderModel.  # noqa: E501
        :type: float
        """

        self._executed_quantity = executed_quantity

    @property
    def limit_price(self):
        """Gets the limit_price of this OrderModel.  # noqa: E501

        Value of the order's limit  # noqa: E501

        :return: The limit_price of this OrderModel.  # noqa: E501
        :rtype: float
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this OrderModel.

        Value of the order's limit  # noqa: E501

        :param limit_price: The limit_price of this OrderModel.  # noqa: E501
        :type: float
        """

        self._limit_price = limit_price

    @property
    def average_price(self):
        """Gets the average_price of this OrderModel.  # noqa: E501

        Average price of all fills on this order  # noqa: E501

        :return: The average_price of this OrderModel.  # noqa: E501
        :rtype: float
        """
        return self._average_price

    @average_price.setter
    def average_price(self, average_price):
        """Sets the average_price of this OrderModel.

        Average price of all fills on this order  # noqa: E501

        :param average_price: The average_price of this OrderModel.  # noqa: E501
        :type: float
        """

        self._average_price = average_price

    @property
    def quantity(self):
        """Gets the quantity of this OrderModel.  # noqa: E501

        Quantity ordered  # noqa: E501

        :return: The quantity of this OrderModel.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderModel.

        Quantity ordered  # noqa: E501

        :param quantity: The quantity of this OrderModel.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def expiration_date(self):
        """Gets the expiration_date of this OrderModel.  # noqa: E501

        Expiration date for a good till date order  # noqa: E501

        :return: The expiration_date of this OrderModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this OrderModel.

        Expiration date for a good till date order  # noqa: E501

        :param expiration_date: The expiration_date of this OrderModel.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def last_status(self):
        """Gets the last_status of this OrderModel.  # noqa: E501

        Status of the order last executed  # noqa: E501

        :return: The last_status of this OrderModel.  # noqa: E501
        :rtype: str
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this OrderModel.

        Status of the order last executed  # noqa: E501

        :param last_status: The last_status of this OrderModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_status is None:
            raise ValueError("Invalid value for `last_status`, must not be `None`")  # noqa: E501
        allowed_values = ["placed", "placementConfirmed", "partiallyExecuted", "executed", "expired", "cancelationRequested", "canceled", "modificationRequested", "modified", "refused", "modificationRefused", "cancelationRefused", "remainderCanceled", "remainderExpired", "remainderExecuted", "other"]  # noqa: E501
        if (self._configuration.client_side_validation and
                last_status not in allowed_values):
            raise ValueError(
                "Invalid value for `last_status` ({0}), must be one of {1}"  # noqa: E501
                .format(last_status, allowed_values)
            )

        self._last_status = last_status

    @property
    def last_status_date_time(self):
        """Gets the last_status_date_time of this OrderModel.  # noqa: E501

        Indicates the date and time of the last status change  # noqa: E501

        :return: The last_status_date_time of this OrderModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_status_date_time

    @last_status_date_time.setter
    def last_status_date_time(self, last_status_date_time):
        """Sets the last_status_date_time of this OrderModel.

        Indicates the date and time of the last status change  # noqa: E501

        :param last_status_date_time: The last_status_date_time of this OrderModel.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and last_status_date_time is None:
            raise ValueError("Invalid value for `last_status_date_time`, must not be `None`")  # noqa: E501

        self._last_status_date_time = last_status_date_time

    @property
    def stop_price(self):
        """Gets the stop_price of this OrderModel.  # noqa: E501

        Stop price for a stop or stop limit order  # noqa: E501

        :return: The stop_price of this OrderModel.  # noqa: E501
        :rtype: float
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this OrderModel.

        Stop price for a stop or stop limit order  # noqa: E501

        :param stop_price: The stop_price of this OrderModel.  # noqa: E501
        :type: float
        """

        self._stop_price = stop_price

    @property
    def fixing_price(self):
        """Gets the fixing_price of this OrderModel.  # noqa: E501

        Fixing price of the order  # noqa: E501

        :return: The fixing_price of this OrderModel.  # noqa: E501
        :rtype: float
        """
        return self._fixing_price

    @fixing_price.setter
    def fixing_price(self, fixing_price):
        """Sets the fixing_price of this OrderModel.

        Fixing price of the order  # noqa: E501

        :param fixing_price: The fixing_price of this OrderModel.  # noqa: E501
        :type: float
        """

        self._fixing_price = fixing_price

    @property
    def condition(self):
        """Gets the condition of this OrderModel.  # noqa: E501

        Pay or receive condition, only applicable for multi-leg orders  # noqa: E501

        :return: The condition of this OrderModel.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this OrderModel.

        Pay or receive condition, only applicable for multi-leg orders  # noqa: E501

        :param condition: The condition of this OrderModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["pay", "receive"]  # noqa: E501
        if (self._configuration.client_side_validation and
                condition not in allowed_values):
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"  # noqa: E501
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def reference_id(self):
        """Gets the reference_id of this OrderModel.  # noqa: E501

        Reference Id supplied at registration time  # noqa: E501

        :return: The reference_id of this OrderModel.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this OrderModel.

        Reference Id supplied at registration time  # noqa: E501

        :param reference_id: The reference_id of this OrderModel.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderModel):
            return True

        return self.to_dict() != other.to_dict()
