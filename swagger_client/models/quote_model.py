# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuoteModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instrument_id': 'str',
        'subscription_level': 'str',
        'open': 'PriceModel',
        'last': 'PriceWithVolumeModel',
        'close': 'PriceWithVolumeModel',
        'high': 'PriceModel',
        'low': 'PriceModel',
        'impl_vol': 'PriceModel',
        'impl_div': 'PriceModel',
        'settlement': 'PriceModel',
        'open_interest': 'VolumeModel',
        'theoretical_price': 'PriceModel',
        'impl_ir': 'PriceModel',
        'cum_vol': 'VolumeModel',
        'bid': 'list[PriceOrderBookModel]',
        'ask': 'list[PriceOrderBookModel]'
    }

    attribute_map = {
        'instrument_id': 'instrumentId',
        'subscription_level': 'subscriptionLevel',
        'open': 'open',
        'last': 'last',
        'close': 'close',
        'high': 'high',
        'low': 'low',
        'impl_vol': 'implVol',
        'impl_div': 'implDiv',
        'settlement': 'settlement',
        'open_interest': 'openInterest',
        'theoretical_price': 'theoreticalPrice',
        'impl_ir': 'implIr',
        'cum_vol': 'cumVol',
        'bid': 'bid',
        'ask': 'ask'
    }

    def __init__(self, instrument_id=None, subscription_level=None, open=None, last=None, close=None, high=None, low=None, impl_vol=None, impl_div=None, settlement=None, open_interest=None, theoretical_price=None, impl_ir=None, cum_vol=None, bid=None, ask=None, _configuration=None):  # noqa: E501
        """QuoteModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._instrument_id = None
        self._subscription_level = None
        self._open = None
        self._last = None
        self._close = None
        self._high = None
        self._low = None
        self._impl_vol = None
        self._impl_div = None
        self._settlement = None
        self._open_interest = None
        self._theoretical_price = None
        self._impl_ir = None
        self._cum_vol = None
        self._bid = None
        self._ask = None
        self.discriminator = None

        self.instrument_id = instrument_id
        self.subscription_level = subscription_level
        if open is not None:
            self.open = open
        if last is not None:
            self.last = last
        if close is not None:
            self.close = close
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if impl_vol is not None:
            self.impl_vol = impl_vol
        if impl_div is not None:
            self.impl_div = impl_div
        if settlement is not None:
            self.settlement = settlement
        if open_interest is not None:
            self.open_interest = open_interest
        if theoretical_price is not None:
            self.theoretical_price = theoretical_price
        if impl_ir is not None:
            self.impl_ir = impl_ir
        if cum_vol is not None:
            self.cum_vol = cum_vol
        self.bid = bid
        self.ask = ask

    @property
    def instrument_id(self):
        """Gets the instrument_id of this QuoteModel.  # noqa: E501

        Security Id  # noqa: E501

        :return: The instrument_id of this QuoteModel.  # noqa: E501
        :rtype: str
        """
        return self._instrument_id

    @instrument_id.setter
    def instrument_id(self, instrument_id):
        """Sets the instrument_id of this QuoteModel.

        Security Id  # noqa: E501

        :param instrument_id: The instrument_id of this QuoteModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and instrument_id is None:
            raise ValueError("Invalid value for `instrument_id`, must not be `None`")  # noqa: E501

        self._instrument_id = instrument_id

    @property
    def subscription_level(self):
        """Gets the subscription_level of this QuoteModel.  # noqa: E501

        Level of quote access  # noqa: E501

        :return: The subscription_level of this QuoteModel.  # noqa: E501
        :rtype: str
        """
        return self._subscription_level

    @subscription_level.setter
    def subscription_level(self, subscription_level):
        """Sets the subscription_level of this QuoteModel.

        Level of quote access  # noqa: E501

        :param subscription_level: The subscription_level of this QuoteModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and subscription_level is None:
            raise ValueError("Invalid value for `subscription_level`, must not be `None`")  # noqa: E501
        allowed_values = ["none", "delayed", "realtimeLevel0", "realtimeLevel1", "realtime"]  # noqa: E501
        if (self._configuration.client_side_validation and
                subscription_level not in allowed_values):
            raise ValueError(
                "Invalid value for `subscription_level` ({0}), must be one of {1}"  # noqa: E501
                .format(subscription_level, allowed_values)
            )

        self._subscription_level = subscription_level

    @property
    def open(self):
        """Gets the open of this QuoteModel.  # noqa: E501

        Open quote  # noqa: E501

        :return: The open of this QuoteModel.  # noqa: E501
        :rtype: PriceModel
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this QuoteModel.

        Open quote  # noqa: E501

        :param open: The open of this QuoteModel.  # noqa: E501
        :type: PriceModel
        """

        self._open = open

    @property
    def last(self):
        """Gets the last of this QuoteModel.  # noqa: E501

        Last quote  # noqa: E501

        :return: The last of this QuoteModel.  # noqa: E501
        :rtype: PriceWithVolumeModel
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this QuoteModel.

        Last quote  # noqa: E501

        :param last: The last of this QuoteModel.  # noqa: E501
        :type: PriceWithVolumeModel
        """

        self._last = last

    @property
    def close(self):
        """Gets the close of this QuoteModel.  # noqa: E501

        Close quote  # noqa: E501

        :return: The close of this QuoteModel.  # noqa: E501
        :rtype: PriceWithVolumeModel
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this QuoteModel.

        Close quote  # noqa: E501

        :param close: The close of this QuoteModel.  # noqa: E501
        :type: PriceWithVolumeModel
        """

        self._close = close

    @property
    def high(self):
        """Gets the high of this QuoteModel.  # noqa: E501

        High quote  # noqa: E501

        :return: The high of this QuoteModel.  # noqa: E501
        :rtype: PriceModel
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this QuoteModel.

        High quote  # noqa: E501

        :param high: The high of this QuoteModel.  # noqa: E501
        :type: PriceModel
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this QuoteModel.  # noqa: E501

        Low quote  # noqa: E501

        :return: The low of this QuoteModel.  # noqa: E501
        :rtype: PriceModel
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this QuoteModel.

        Low quote  # noqa: E501

        :param low: The low of this QuoteModel.  # noqa: E501
        :type: PriceModel
        """

        self._low = low

    @property
    def impl_vol(self):
        """Gets the impl_vol of this QuoteModel.  # noqa: E501

        Implied volatility quote  # noqa: E501

        :return: The impl_vol of this QuoteModel.  # noqa: E501
        :rtype: PriceModel
        """
        return self._impl_vol

    @impl_vol.setter
    def impl_vol(self, impl_vol):
        """Sets the impl_vol of this QuoteModel.

        Implied volatility quote  # noqa: E501

        :param impl_vol: The impl_vol of this QuoteModel.  # noqa: E501
        :type: PriceModel
        """

        self._impl_vol = impl_vol

    @property
    def impl_div(self):
        """Gets the impl_div of this QuoteModel.  # noqa: E501

        Implied dividend quote  # noqa: E501

        :return: The impl_div of this QuoteModel.  # noqa: E501
        :rtype: PriceModel
        """
        return self._impl_div

    @impl_div.setter
    def impl_div(self, impl_div):
        """Sets the impl_div of this QuoteModel.

        Implied dividend quote  # noqa: E501

        :param impl_div: The impl_div of this QuoteModel.  # noqa: E501
        :type: PriceModel
        """

        self._impl_div = impl_div

    @property
    def settlement(self):
        """Gets the settlement of this QuoteModel.  # noqa: E501

        Settlement quote  # noqa: E501

        :return: The settlement of this QuoteModel.  # noqa: E501
        :rtype: PriceModel
        """
        return self._settlement

    @settlement.setter
    def settlement(self, settlement):
        """Sets the settlement of this QuoteModel.

        Settlement quote  # noqa: E501

        :param settlement: The settlement of this QuoteModel.  # noqa: E501
        :type: PriceModel
        """

        self._settlement = settlement

    @property
    def open_interest(self):
        """Gets the open_interest of this QuoteModel.  # noqa: E501

        Open interest quote  # noqa: E501

        :return: The open_interest of this QuoteModel.  # noqa: E501
        :rtype: VolumeModel
        """
        return self._open_interest

    @open_interest.setter
    def open_interest(self, open_interest):
        """Sets the open_interest of this QuoteModel.

        Open interest quote  # noqa: E501

        :param open_interest: The open_interest of this QuoteModel.  # noqa: E501
        :type: VolumeModel
        """

        self._open_interest = open_interest

    @property
    def theoretical_price(self):
        """Gets the theoretical_price of this QuoteModel.  # noqa: E501

        Theoretical price quote  # noqa: E501

        :return: The theoretical_price of this QuoteModel.  # noqa: E501
        :rtype: PriceModel
        """
        return self._theoretical_price

    @theoretical_price.setter
    def theoretical_price(self, theoretical_price):
        """Sets the theoretical_price of this QuoteModel.

        Theoretical price quote  # noqa: E501

        :param theoretical_price: The theoretical_price of this QuoteModel.  # noqa: E501
        :type: PriceModel
        """

        self._theoretical_price = theoretical_price

    @property
    def impl_ir(self):
        """Gets the impl_ir of this QuoteModel.  # noqa: E501

        Implied interest rate quote  # noqa: E501

        :return: The impl_ir of this QuoteModel.  # noqa: E501
        :rtype: PriceModel
        """
        return self._impl_ir

    @impl_ir.setter
    def impl_ir(self, impl_ir):
        """Sets the impl_ir of this QuoteModel.

        Implied interest rate quote  # noqa: E501

        :param impl_ir: The impl_ir of this QuoteModel.  # noqa: E501
        :type: PriceModel
        """

        self._impl_ir = impl_ir

    @property
    def cum_vol(self):
        """Gets the cum_vol of this QuoteModel.  # noqa: E501

        Cumulative volume quote  # noqa: E501

        :return: The cum_vol of this QuoteModel.  # noqa: E501
        :rtype: VolumeModel
        """
        return self._cum_vol

    @cum_vol.setter
    def cum_vol(self, cum_vol):
        """Sets the cum_vol of this QuoteModel.

        Cumulative volume quote  # noqa: E501

        :param cum_vol: The cum_vol of this QuoteModel.  # noqa: E501
        :type: VolumeModel
        """

        self._cum_vol = cum_vol

    @property
    def bid(self):
        """Gets the bid of this QuoteModel.  # noqa: E501

        Bid book  # noqa: E501

        :return: The bid of this QuoteModel.  # noqa: E501
        :rtype: list[PriceOrderBookModel]
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this QuoteModel.

        Bid book  # noqa: E501

        :param bid: The bid of this QuoteModel.  # noqa: E501
        :type: list[PriceOrderBookModel]
        """
        if self._configuration.client_side_validation and bid is None:
            raise ValueError("Invalid value for `bid`, must not be `None`")  # noqa: E501

        self._bid = bid

    @property
    def ask(self):
        """Gets the ask of this QuoteModel.  # noqa: E501

        Ask book  # noqa: E501

        :return: The ask of this QuoteModel.  # noqa: E501
        :rtype: list[PriceOrderBookModel]
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this QuoteModel.

        Ask book  # noqa: E501

        :param ask: The ask of this QuoteModel.  # noqa: E501
        :type: list[PriceOrderBookModel]
        """
        if self._configuration.client_side_validation and ask is None:
            raise ValueError("Invalid value for `ask`, must not be `None`")  # noqa: E501

        self._ask = ask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuoteModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuoteModel):
            return True

        return self.to_dict() != other.to_dict()
