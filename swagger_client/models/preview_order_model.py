# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PreviewOrderModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_can_be_registered': 'bool',
        'expected_expiration_date': 'datetime',
        'position_effect': 'str',
        'effect_on_spending_limit': 'float',
        'current_spending_limit': 'float',
        'new_spending_limit': 'float',
        'currency': 'str',
        'old_risk_number': 'int',
        'new_risk_number': 'int',
        'recommended_risk_number': 'int',
        'warnings_to_be_shown': 'list[str]',
        'warnings_to_be_confirmed': 'list[str]',
        'validation_code': 'str'
    }

    attribute_map = {
        'order_can_be_registered': 'orderCanBeRegistered',
        'expected_expiration_date': 'expectedExpirationDate',
        'position_effect': 'positionEffect',
        'effect_on_spending_limit': 'effectOnSpendingLimit',
        'current_spending_limit': 'currentSpendingLimit',
        'new_spending_limit': 'newSpendingLimit',
        'currency': 'currency',
        'old_risk_number': 'oldRiskNumber',
        'new_risk_number': 'newRiskNumber',
        'recommended_risk_number': 'recommendedRiskNumber',
        'warnings_to_be_shown': 'warningsToBeShown',
        'warnings_to_be_confirmed': 'warningsToBeConfirmed',
        'validation_code': 'validationCode'
    }

    def __init__(self, order_can_be_registered=None, expected_expiration_date=None, position_effect=None, effect_on_spending_limit=None, current_spending_limit=None, new_spending_limit=None, currency=None, old_risk_number=None, new_risk_number=None, recommended_risk_number=None, warnings_to_be_shown=None, warnings_to_be_confirmed=None, validation_code=None, _configuration=None):  # noqa: E501
        """PreviewOrderModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._order_can_be_registered = None
        self._expected_expiration_date = None
        self._position_effect = None
        self._effect_on_spending_limit = None
        self._current_spending_limit = None
        self._new_spending_limit = None
        self._currency = None
        self._old_risk_number = None
        self._new_risk_number = None
        self._recommended_risk_number = None
        self._warnings_to_be_shown = None
        self._warnings_to_be_confirmed = None
        self._validation_code = None
        self.discriminator = None

        self.order_can_be_registered = order_can_be_registered
        if expected_expiration_date is not None:
            self.expected_expiration_date = expected_expiration_date
        if position_effect is not None:
            self.position_effect = position_effect
        if effect_on_spending_limit is not None:
            self.effect_on_spending_limit = effect_on_spending_limit
        if current_spending_limit is not None:
            self.current_spending_limit = current_spending_limit
        if new_spending_limit is not None:
            self.new_spending_limit = new_spending_limit
        if currency is not None:
            self.currency = currency
        if old_risk_number is not None:
            self.old_risk_number = old_risk_number
        if new_risk_number is not None:
            self.new_risk_number = new_risk_number
        if recommended_risk_number is not None:
            self.recommended_risk_number = recommended_risk_number
        self.warnings_to_be_shown = warnings_to_be_shown
        self.warnings_to_be_confirmed = warnings_to_be_confirmed
        if validation_code is not None:
            self.validation_code = validation_code

    @property
    def order_can_be_registered(self):
        """Gets the order_can_be_registered of this PreviewOrderModel.  # noqa: E501

        True if the order can be placed  # noqa: E501

        :return: The order_can_be_registered of this PreviewOrderModel.  # noqa: E501
        :rtype: bool
        """
        return self._order_can_be_registered

    @order_can_be_registered.setter
    def order_can_be_registered(self, order_can_be_registered):
        """Sets the order_can_be_registered of this PreviewOrderModel.

        True if the order can be placed  # noqa: E501

        :param order_can_be_registered: The order_can_be_registered of this PreviewOrderModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and order_can_be_registered is None:
            raise ValueError("Invalid value for `order_can_be_registered`, must not be `None`")  # noqa: E501

        self._order_can_be_registered = order_can_be_registered

    @property
    def expected_expiration_date(self):
        """Gets the expected_expiration_date of this PreviewOrderModel.  # noqa: E501

        For GTD en GTC orders the end date will be limited to about 2 weeks maximum  # noqa: E501

        :return: The expected_expiration_date of this PreviewOrderModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_expiration_date

    @expected_expiration_date.setter
    def expected_expiration_date(self, expected_expiration_date):
        """Sets the expected_expiration_date of this PreviewOrderModel.

        For GTD en GTC orders the end date will be limited to about 2 weeks maximum  # noqa: E501

        :param expected_expiration_date: The expected_expiration_date of this PreviewOrderModel.  # noqa: E501
        :type: datetime
        """

        self._expected_expiration_date = expected_expiration_date

    @property
    def position_effect(self):
        """Gets the position_effect of this PreviewOrderModel.  # noqa: E501

        Contains the position effect information (open, close)  # noqa: E501

        :return: The position_effect of this PreviewOrderModel.  # noqa: E501
        :rtype: str
        """
        return self._position_effect

    @position_effect.setter
    def position_effect(self, position_effect):
        """Sets the position_effect of this PreviewOrderModel.

        Contains the position effect information (open, close)  # noqa: E501

        :param position_effect: The position_effect of this PreviewOrderModel.  # noqa: E501
        :type: str
        """

        self._position_effect = position_effect

    @property
    def effect_on_spending_limit(self):
        """Gets the effect_on_spending_limit of this PreviewOrderModel.  # noqa: E501

        Effect of a successfully placed order on the spending limit of the account  # noqa: E501

        :return: The effect_on_spending_limit of this PreviewOrderModel.  # noqa: E501
        :rtype: float
        """
        return self._effect_on_spending_limit

    @effect_on_spending_limit.setter
    def effect_on_spending_limit(self, effect_on_spending_limit):
        """Sets the effect_on_spending_limit of this PreviewOrderModel.

        Effect of a successfully placed order on the spending limit of the account  # noqa: E501

        :param effect_on_spending_limit: The effect_on_spending_limit of this PreviewOrderModel.  # noqa: E501
        :type: float
        """

        self._effect_on_spending_limit = effect_on_spending_limit

    @property
    def current_spending_limit(self):
        """Gets the current_spending_limit of this PreviewOrderModel.  # noqa: E501

        The current spending limit of the account (before placing the order)  # noqa: E501

        :return: The current_spending_limit of this PreviewOrderModel.  # noqa: E501
        :rtype: float
        """
        return self._current_spending_limit

    @current_spending_limit.setter
    def current_spending_limit(self, current_spending_limit):
        """Sets the current_spending_limit of this PreviewOrderModel.

        The current spending limit of the account (before placing the order)  # noqa: E501

        :param current_spending_limit: The current_spending_limit of this PreviewOrderModel.  # noqa: E501
        :type: float
        """

        self._current_spending_limit = current_spending_limit

    @property
    def new_spending_limit(self):
        """Gets the new_spending_limit of this PreviewOrderModel.  # noqa: E501

        The new spending limit of the account (after placing the order)  # noqa: E501

        :return: The new_spending_limit of this PreviewOrderModel.  # noqa: E501
        :rtype: float
        """
        return self._new_spending_limit

    @new_spending_limit.setter
    def new_spending_limit(self, new_spending_limit):
        """Sets the new_spending_limit of this PreviewOrderModel.

        The new spending limit of the account (after placing the order)  # noqa: E501

        :param new_spending_limit: The new_spending_limit of this PreviewOrderModel.  # noqa: E501
        :type: float
        """

        self._new_spending_limit = new_spending_limit

    @property
    def currency(self):
        """Gets the currency of this PreviewOrderModel.  # noqa: E501

        The currency of the spending limit  # noqa: E501

        :return: The currency of this PreviewOrderModel.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PreviewOrderModel.

        The currency of the spending limit  # noqa: E501

        :param currency: The currency of this PreviewOrderModel.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def old_risk_number(self):
        """Gets the old_risk_number of this PreviewOrderModel.  # noqa: E501

        Risk number before placing the order  # noqa: E501

        :return: The old_risk_number of this PreviewOrderModel.  # noqa: E501
        :rtype: int
        """
        return self._old_risk_number

    @old_risk_number.setter
    def old_risk_number(self, old_risk_number):
        """Sets the old_risk_number of this PreviewOrderModel.

        Risk number before placing the order  # noqa: E501

        :param old_risk_number: The old_risk_number of this PreviewOrderModel.  # noqa: E501
        :type: int
        """

        self._old_risk_number = old_risk_number

    @property
    def new_risk_number(self):
        """Gets the new_risk_number of this PreviewOrderModel.  # noqa: E501

        Risk number after successfully placing the order  # noqa: E501

        :return: The new_risk_number of this PreviewOrderModel.  # noqa: E501
        :rtype: int
        """
        return self._new_risk_number

    @new_risk_number.setter
    def new_risk_number(self, new_risk_number):
        """Sets the new_risk_number of this PreviewOrderModel.

        Risk number after successfully placing the order  # noqa: E501

        :param new_risk_number: The new_risk_number of this PreviewOrderModel.  # noqa: E501
        :type: int
        """

        self._new_risk_number = new_risk_number

    @property
    def recommended_risk_number(self):
        """Gets the recommended_risk_number of this PreviewOrderModel.  # noqa: E501

        Recommended risk number  # noqa: E501

        :return: The recommended_risk_number of this PreviewOrderModel.  # noqa: E501
        :rtype: int
        """
        return self._recommended_risk_number

    @recommended_risk_number.setter
    def recommended_risk_number(self, recommended_risk_number):
        """Sets the recommended_risk_number of this PreviewOrderModel.

        Recommended risk number  # noqa: E501

        :param recommended_risk_number: The recommended_risk_number of this PreviewOrderModel.  # noqa: E501
        :type: int
        """

        self._recommended_risk_number = recommended_risk_number

    @property
    def warnings_to_be_shown(self):
        """Gets the warnings_to_be_shown of this PreviewOrderModel.  # noqa: E501

        Warnings or error messages about the requested order that only needs to be shown  # noqa: E501

        :return: The warnings_to_be_shown of this PreviewOrderModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings_to_be_shown

    @warnings_to_be_shown.setter
    def warnings_to_be_shown(self, warnings_to_be_shown):
        """Sets the warnings_to_be_shown of this PreviewOrderModel.

        Warnings or error messages about the requested order that only needs to be shown  # noqa: E501

        :param warnings_to_be_shown: The warnings_to_be_shown of this PreviewOrderModel.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and warnings_to_be_shown is None:
            raise ValueError("Invalid value for `warnings_to_be_shown`, must not be `None`")  # noqa: E501

        self._warnings_to_be_shown = warnings_to_be_shown

    @property
    def warnings_to_be_confirmed(self):
        """Gets the warnings_to_be_confirmed of this PreviewOrderModel.  # noqa: E501

        Warning messages about the requested order that explicitly need to be confirmed  # noqa: E501

        :return: The warnings_to_be_confirmed of this PreviewOrderModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings_to_be_confirmed

    @warnings_to_be_confirmed.setter
    def warnings_to_be_confirmed(self, warnings_to_be_confirmed):
        """Sets the warnings_to_be_confirmed of this PreviewOrderModel.

        Warning messages about the requested order that explicitly need to be confirmed  # noqa: E501

        :param warnings_to_be_confirmed: The warnings_to_be_confirmed of this PreviewOrderModel.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and warnings_to_be_confirmed is None:
            raise ValueError("Invalid value for `warnings_to_be_confirmed`, must not be `None`")  # noqa: E501

        self._warnings_to_be_confirmed = warnings_to_be_confirmed

    @property
    def validation_code(self):
        """Gets the validation_code of this PreviewOrderModel.  # noqa: E501

        (Optional) validation code (only supplied when order can be registered)  # noqa: E501

        :return: The validation_code of this PreviewOrderModel.  # noqa: E501
        :rtype: str
        """
        return self._validation_code

    @validation_code.setter
    def validation_code(self, validation_code):
        """Sets the validation_code of this PreviewOrderModel.

        (Optional) validation code (only supplied when order can be registered)  # noqa: E501

        :param validation_code: The validation_code of this PreviewOrderModel.  # noqa: E501
        :type: str
        """

        self._validation_code = validation_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreviewOrderModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreviewOrderModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PreviewOrderModel):
            return True

        return self.to_dict() != other.to_dict()
