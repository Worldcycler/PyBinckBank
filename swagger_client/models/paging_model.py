# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PagingModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'max': 'int',
        'offset': 'int',
        'next': 'str',
        'previous': 'str',
        'refresh': 'str'
    }

    attribute_map = {
        'limit': 'limit',
        'max': 'max',
        'offset': 'offset',
        'next': 'next',
        'previous': 'previous',
        'refresh': 'refresh'
    }

    def __init__(self, limit=None, max=None, offset=None, next=None, previous=None, refresh=None, _configuration=None):  # noqa: E501
        """PagingModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._limit = None
        self._max = None
        self._offset = None
        self._next = None
        self._previous = None
        self._refresh = None
        self.discriminator = None

        self.limit = limit
        self.max = max
        self.offset = offset
        if next is not None:
            self.next = next
        if previous is not None:
            self.previous = previous
        self.refresh = refresh

    @property
    def limit(self):
        """Gets the limit of this PagingModel.  # noqa: E501

        Offset of the last entry in this subset  # noqa: E501

        :return: The limit of this PagingModel.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PagingModel.

        Offset of the last entry in this subset  # noqa: E501

        :param limit: The limit of this PagingModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def max(self):
        """Gets the max of this PagingModel.  # noqa: E501

        Maximum number of entries per subset  # noqa: E501

        :return: The max of this PagingModel.  # noqa: E501
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this PagingModel.

        Maximum number of entries per subset  # noqa: E501

        :param max: The max of this PagingModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")  # noqa: E501

        self._max = max

    @property
    def offset(self):
        """Gets the offset of this PagingModel.  # noqa: E501

        Offset of the first entry in this subset  # noqa: E501

        :return: The offset of this PagingModel.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PagingModel.

        Offset of the first entry in this subset  # noqa: E501

        :param offset: The offset of this PagingModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def next(self):
        """Gets the next of this PagingModel.  # noqa: E501

        Parameter and value to add to the request to retrieve the next subset  # noqa: E501

        :return: The next of this PagingModel.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PagingModel.

        Parameter and value to add to the request to retrieve the next subset  # noqa: E501

        :param next: The next of this PagingModel.  # noqa: E501
        :type: str
        """

        self._next = next

    @property
    def previous(self):
        """Gets the previous of this PagingModel.  # noqa: E501

        Parameter and value to add to the request to retrieve the previous subset  # noqa: E501

        :return: The previous of this PagingModel.  # noqa: E501
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this PagingModel.

        Parameter and value to add to the request to retrieve the previous subset  # noqa: E501

        :param previous: The previous of this PagingModel.  # noqa: E501
        :type: str
        """

        self._previous = previous

    @property
    def refresh(self):
        """Gets the refresh of this PagingModel.  # noqa: E501

        Parameter and value to add to the request to retrieve the same subset  # noqa: E501

        :return: The refresh of this PagingModel.  # noqa: E501
        :rtype: str
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """Sets the refresh of this PagingModel.

        Parameter and value to add to the request to retrieve the same subset  # noqa: E501

        :param refresh: The refresh of this PagingModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and refresh is None:
            raise ValueError("Invalid value for `refresh`, must not be `None`")  # noqa: E501

        self._refresh = refresh

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PagingModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PagingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PagingModel):
            return True

        return self.to_dict() != other.to_dict()
