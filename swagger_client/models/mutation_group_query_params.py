# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MutationGroupQueryParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mutation_group': 'str'
    }

    attribute_map = {
        'mutation_group': 'mutationGroup'
    }

    def __init__(self, mutation_group=None, _configuration=None):  # noqa: E501
        """MutationGroupQueryParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mutation_group = None
        self.discriminator = None

        if mutation_group is not None:
            self.mutation_group = mutation_group

    @property
    def mutation_group(self):
        """Gets the mutation_group of this MutationGroupQueryParams.  # noqa: E501

        Mutation groups (with enums)<br />  BuyAndSell includes : <br />    AssignmentCall<br />    AssignmentPut<br />    ExcerciseCall<br />    ExcercisePut<br />    Buy<br />    OpeningBuy  <br />    OpeningBuyFutures<br />    Sell<br />    OpeningSell<br />    OpeningSellFutures<br />    ClosingBuy<br />    ClosingBuyFutures<br />    ClosingSell<br />    ClosingSellFutures<br />  Cost includes : <br />    SettlementCosts<br />  CouponPayment includes : <br />    SecuritiesLendingCouponPayment<br />    CouponPayment<br />  DividendPayment includes : <br />    SecuritiesLendingDividendPayment<br />    DividendPayment<br />  InterestPayment includes : <br />    CreditInterest<br />    DebitInterest<br />  MoneyTransfer includes : <br />    ExternalTransfer<br />    InternalTransfer<br />    OnlineMoneyTransfer<br />    Regulation<br />  PositionMutation includes : <br />    Buy<br />    Sell<br />  # noqa: E501

        :return: The mutation_group of this MutationGroupQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._mutation_group

    @mutation_group.setter
    def mutation_group(self, mutation_group):
        """Sets the mutation_group of this MutationGroupQueryParams.

        Mutation groups (with enums)<br />  BuyAndSell includes : <br />    AssignmentCall<br />    AssignmentPut<br />    ExcerciseCall<br />    ExcercisePut<br />    Buy<br />    OpeningBuy  <br />    OpeningBuyFutures<br />    Sell<br />    OpeningSell<br />    OpeningSellFutures<br />    ClosingBuy<br />    ClosingBuyFutures<br />    ClosingSell<br />    ClosingSellFutures<br />  Cost includes : <br />    SettlementCosts<br />  CouponPayment includes : <br />    SecuritiesLendingCouponPayment<br />    CouponPayment<br />  DividendPayment includes : <br />    SecuritiesLendingDividendPayment<br />    DividendPayment<br />  InterestPayment includes : <br />    CreditInterest<br />    DebitInterest<br />  MoneyTransfer includes : <br />    ExternalTransfer<br />    InternalTransfer<br />    OnlineMoneyTransfer<br />    Regulation<br />  PositionMutation includes : <br />    Buy<br />    Sell<br />  # noqa: E501

        :param mutation_group: The mutation_group of this MutationGroupQueryParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["buyAndSell", "cost", "couponPayment", "dividendPayment", "interestPayment", "moneyTransfer", "positionMutation"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mutation_group not in allowed_values):
            raise ValueError(
                "Invalid value for `mutation_group` ({0}), must be one of {1}"  # noqa: E501
                .format(mutation_group, allowed_values)
            )

        self._mutation_group = mutation_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MutationGroupQueryParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MutationGroupQueryParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MutationGroupQueryParams):
            return True

        return self.to_dict() != other.to_dict()
