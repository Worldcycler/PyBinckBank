# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InstrumentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'symbol': 'str',
        'isincode': 'str',
        'type': 'str',
        'market_identification_code': 'str',
        'derivatives_info': 'DerivativesInfoModel',
        'srd_info': 'SrdInfoModel',
        'bond_info': 'BondInfoModel',
        'leveraged_product': 'LeveragedProductInfoModel',
        'currency': 'str',
        'price_decimals': 'int',
        'ticker_symbol': 'str',
        'is_tradable': 'bool',
        'is_kid_applicable': 'bool',
        'tick_size_collection': 'TickSizesModel',
        'has_options': 'bool',
        'has_futures': 'bool',
        'has_srd': 'bool',
        'has_leveraged_products': 'bool',
        'has_order_modifications': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'symbol': 'symbol',
        'isincode': 'isincode',
        'type': 'type',
        'market_identification_code': 'marketIdentificationCode',
        'derivatives_info': 'derivativesInfo',
        'srd_info': 'srdInfo',
        'bond_info': 'bondInfo',
        'leveraged_product': 'leveragedProduct',
        'currency': 'currency',
        'price_decimals': 'priceDecimals',
        'ticker_symbol': 'tickerSymbol',
        'is_tradable': 'isTradable',
        'is_kid_applicable': 'isKidApplicable',
        'tick_size_collection': 'tickSizeCollection',
        'has_options': 'hasOptions',
        'has_futures': 'hasFutures',
        'has_srd': 'hasSrd',
        'has_leveraged_products': 'hasLeveragedProducts',
        'has_order_modifications': 'hasOrderModifications'
    }

    def __init__(self, id=None, name=None, symbol=None, isincode=None, type=None, market_identification_code=None, derivatives_info=None, srd_info=None, bond_info=None, leveraged_product=None, currency=None, price_decimals=None, ticker_symbol=None, is_tradable=None, is_kid_applicable=None, tick_size_collection=None, has_options=None, has_futures=None, has_srd=None, has_leveraged_products=None, has_order_modifications=None, _configuration=None):  # noqa: E501
        """InstrumentModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._symbol = None
        self._isincode = None
        self._type = None
        self._market_identification_code = None
        self._derivatives_info = None
        self._srd_info = None
        self._bond_info = None
        self._leveraged_product = None
        self._currency = None
        self._price_decimals = None
        self._ticker_symbol = None
        self._is_tradable = None
        self._is_kid_applicable = None
        self._tick_size_collection = None
        self._has_options = None
        self._has_futures = None
        self._has_srd = None
        self._has_leveraged_products = None
        self._has_order_modifications = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.symbol = symbol
        if isincode is not None:
            self.isincode = isincode
        self.type = type
        if market_identification_code is not None:
            self.market_identification_code = market_identification_code
        if derivatives_info is not None:
            self.derivatives_info = derivatives_info
        if srd_info is not None:
            self.srd_info = srd_info
        if bond_info is not None:
            self.bond_info = bond_info
        if leveraged_product is not None:
            self.leveraged_product = leveraged_product
        self.currency = currency
        self.price_decimals = price_decimals
        self.ticker_symbol = ticker_symbol
        self.is_tradable = is_tradable
        self.is_kid_applicable = is_kid_applicable
        if tick_size_collection is not None:
            self.tick_size_collection = tick_size_collection
        self.has_options = has_options
        self.has_futures = has_futures
        self.has_srd = has_srd
        self.has_leveraged_products = has_leveraged_products
        self.has_order_modifications = has_order_modifications

    @property
    def id(self):
        """Gets the id of this InstrumentModel.  # noqa: E501

        Identification of the instrument  # noqa: E501

        :return: The id of this InstrumentModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstrumentModel.

        Identification of the instrument  # noqa: E501

        :param id: The id of this InstrumentModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this InstrumentModel.  # noqa: E501

        Name of the instrument  # noqa: E501

        :return: The name of this InstrumentModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstrumentModel.

        Name of the instrument  # noqa: E501

        :param name: The name of this InstrumentModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this InstrumentModel.  # noqa: E501

        Symbol of the instrument  # noqa: E501

        :return: The symbol of this InstrumentModel.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InstrumentModel.

        Symbol of the instrument  # noqa: E501

        :param symbol: The symbol of this InstrumentModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def isincode(self):
        """Gets the isincode of this InstrumentModel.  # noqa: E501

        ISIN-code of the instrument  # noqa: E501

        :return: The isincode of this InstrumentModel.  # noqa: E501
        :rtype: str
        """
        return self._isincode

    @isincode.setter
    def isincode(self, isincode):
        """Sets the isincode of this InstrumentModel.

        ISIN-code of the instrument  # noqa: E501

        :param isincode: The isincode of this InstrumentModel.  # noqa: E501
        :type: str
        """

        self._isincode = isincode

    @property
    def type(self):
        """Gets the type of this InstrumentModel.  # noqa: E501

        OptionType of the instrument  # noqa: E501

        :return: The type of this InstrumentModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InstrumentModel.

        OptionType of the instrument  # noqa: E501

        :param type: The type of this InstrumentModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["bond", "cashDividend", "certificate", "choiceDividend", "claim", "coupon", "discounter", "equity", "future", "futureClass", "index", "investmentFund", "ipo", "option", "optionClass", "otherLeveragedProduct", "speeder", "sprinter", "srd", "srdClass", "stockDividend", "structuredProduct", "tracker", "turbo", "unclassified", "warrant"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def market_identification_code(self):
        """Gets the market_identification_code of this InstrumentModel.  # noqa: E501

        Market Identification Code of the instrument  # noqa: E501

        :return: The market_identification_code of this InstrumentModel.  # noqa: E501
        :rtype: str
        """
        return self._market_identification_code

    @market_identification_code.setter
    def market_identification_code(self, market_identification_code):
        """Sets the market_identification_code of this InstrumentModel.

        Market Identification Code of the instrument  # noqa: E501

        :param market_identification_code: The market_identification_code of this InstrumentModel.  # noqa: E501
        :type: str
        """

        self._market_identification_code = market_identification_code

    @property
    def derivatives_info(self):
        """Gets the derivatives_info of this InstrumentModel.  # noqa: E501

        Derivative serie information  # noqa: E501

        :return: The derivatives_info of this InstrumentModel.  # noqa: E501
        :rtype: DerivativesInfoModel
        """
        return self._derivatives_info

    @derivatives_info.setter
    def derivatives_info(self, derivatives_info):
        """Sets the derivatives_info of this InstrumentModel.

        Derivative serie information  # noqa: E501

        :param derivatives_info: The derivatives_info of this InstrumentModel.  # noqa: E501
        :type: DerivativesInfoModel
        """

        self._derivatives_info = derivatives_info

    @property
    def srd_info(self):
        """Gets the srd_info of this InstrumentModel.  # noqa: E501

        Srd or Srd class information:  Searching for an Srd will return a class. Ordering can done on both this class or the underlying equity.  Positions and transactions report the SRD class. To get information about the underlying equity, the SRD can be retrieved using the instruments endpoint.  # noqa: E501

        :return: The srd_info of this InstrumentModel.  # noqa: E501
        :rtype: SrdInfoModel
        """
        return self._srd_info

    @srd_info.setter
    def srd_info(self, srd_info):
        """Sets the srd_info of this InstrumentModel.

        Srd or Srd class information:  Searching for an Srd will return a class. Ordering can done on both this class or the underlying equity.  Positions and transactions report the SRD class. To get information about the underlying equity, the SRD can be retrieved using the instruments endpoint.  # noqa: E501

        :param srd_info: The srd_info of this InstrumentModel.  # noqa: E501
        :type: SrdInfoModel
        """

        self._srd_info = srd_info

    @property
    def bond_info(self):
        """Gets the bond_info of this InstrumentModel.  # noqa: E501

        Bond only information  # noqa: E501

        :return: The bond_info of this InstrumentModel.  # noqa: E501
        :rtype: BondInfoModel
        """
        return self._bond_info

    @bond_info.setter
    def bond_info(self, bond_info):
        """Sets the bond_info of this InstrumentModel.

        Bond only information  # noqa: E501

        :param bond_info: The bond_info of this InstrumentModel.  # noqa: E501
        :type: BondInfoModel
        """

        self._bond_info = bond_info

    @property
    def leveraged_product(self):
        """Gets the leveraged_product of this InstrumentModel.  # noqa: E501

        Leveraged Product information  # noqa: E501

        :return: The leveraged_product of this InstrumentModel.  # noqa: E501
        :rtype: LeveragedProductInfoModel
        """
        return self._leveraged_product

    @leveraged_product.setter
    def leveraged_product(self, leveraged_product):
        """Sets the leveraged_product of this InstrumentModel.

        Leveraged Product information  # noqa: E501

        :param leveraged_product: The leveraged_product of this InstrumentModel.  # noqa: E501
        :type: LeveragedProductInfoModel
        """

        self._leveraged_product = leveraged_product

    @property
    def currency(self):
        """Gets the currency of this InstrumentModel.  # noqa: E501

        Currency of the instrument  # noqa: E501

        :return: The currency of this InstrumentModel.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InstrumentModel.

        Currency of the instrument  # noqa: E501

        :param currency: The currency of this InstrumentModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def price_decimals(self):
        """Gets the price_decimals of this InstrumentModel.  # noqa: E501

        Number of decimals used to format the price - this is the maximum number of decimals, price can come with less, if higher than a certain limit  # noqa: E501

        :return: The price_decimals of this InstrumentModel.  # noqa: E501
        :rtype: int
        """
        return self._price_decimals

    @price_decimals.setter
    def price_decimals(self, price_decimals):
        """Sets the price_decimals of this InstrumentModel.

        Number of decimals used to format the price - this is the maximum number of decimals, price can come with less, if higher than a certain limit  # noqa: E501

        :param price_decimals: The price_decimals of this InstrumentModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and price_decimals is None:
            raise ValueError("Invalid value for `price_decimals`, must not be `None`")  # noqa: E501

        self._price_decimals = price_decimals

    @property
    def ticker_symbol(self):
        """Gets the ticker_symbol of this InstrumentModel.  # noqa: E501

        Ticker symbol of the instrument  # noqa: E501

        :return: The ticker_symbol of this InstrumentModel.  # noqa: E501
        :rtype: str
        """
        return self._ticker_symbol

    @ticker_symbol.setter
    def ticker_symbol(self, ticker_symbol):
        """Sets the ticker_symbol of this InstrumentModel.

        Ticker symbol of the instrument  # noqa: E501

        :param ticker_symbol: The ticker_symbol of this InstrumentModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ticker_symbol is None:
            raise ValueError("Invalid value for `ticker_symbol`, must not be `None`")  # noqa: E501

        self._ticker_symbol = ticker_symbol

    @property
    def is_tradable(self):
        """Gets the is_tradable of this InstrumentModel.  # noqa: E501

        Indicates if orders for this instrument can be processed  # noqa: E501

        :return: The is_tradable of this InstrumentModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_tradable

    @is_tradable.setter
    def is_tradable(self, is_tradable):
        """Sets the is_tradable of this InstrumentModel.

        Indicates if orders for this instrument can be processed  # noqa: E501

        :param is_tradable: The is_tradable of this InstrumentModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_tradable is None:
            raise ValueError("Invalid value for `is_tradable`, must not be `None`")  # noqa: E501

        self._is_tradable = is_tradable

    @property
    def is_kid_applicable(self):
        """Gets the is_kid_applicable of this InstrumentModel.  # noqa: E501

        Indicates whether KID document must be shown before placing an order  # noqa: E501

        :return: The is_kid_applicable of this InstrumentModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_kid_applicable

    @is_kid_applicable.setter
    def is_kid_applicable(self, is_kid_applicable):
        """Sets the is_kid_applicable of this InstrumentModel.

        Indicates whether KID document must be shown before placing an order  # noqa: E501

        :param is_kid_applicable: The is_kid_applicable of this InstrumentModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_kid_applicable is None:
            raise ValueError("Invalid value for `is_kid_applicable`, must not be `None`")  # noqa: E501

        self._is_kid_applicable = is_kid_applicable

    @property
    def tick_size_collection(self):
        """Gets the tick_size_collection of this InstrumentModel.  # noqa: E501

        Table containing tick sizes for minimal prize movement  # noqa: E501

        :return: The tick_size_collection of this InstrumentModel.  # noqa: E501
        :rtype: TickSizesModel
        """
        return self._tick_size_collection

    @tick_size_collection.setter
    def tick_size_collection(self, tick_size_collection):
        """Sets the tick_size_collection of this InstrumentModel.

        Table containing tick sizes for minimal prize movement  # noqa: E501

        :param tick_size_collection: The tick_size_collection of this InstrumentModel.  # noqa: E501
        :type: TickSizesModel
        """

        self._tick_size_collection = tick_size_collection

    @property
    def has_options(self):
        """Gets the has_options of this InstrumentModel.  # noqa: E501

        Indicates whether there exists at least one non-cancelled, non-expired, tradable option for this security, either  an underlying value or an option class, with a valid listing (for the company/label) for which  the account is allowed to trade  # noqa: E501

        :return: The has_options of this InstrumentModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_options

    @has_options.setter
    def has_options(self, has_options):
        """Sets the has_options of this InstrumentModel.

        Indicates whether there exists at least one non-cancelled, non-expired, tradable option for this security, either  an underlying value or an option class, with a valid listing (for the company/label) for which  the account is allowed to trade  # noqa: E501

        :param has_options: The has_options of this InstrumentModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and has_options is None:
            raise ValueError("Invalid value for `has_options`, must not be `None`")  # noqa: E501

        self._has_options = has_options

    @property
    def has_futures(self):
        """Gets the has_futures of this InstrumentModel.  # noqa: E501

        Indicates whether there exists at least one non-cancelled, non-expired, tradable future for this instrument  , either an underlying value or a future class, with a valid listing (for the company/label) for which the account  is allowed to trade.  # noqa: E501

        :return: The has_futures of this InstrumentModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_futures

    @has_futures.setter
    def has_futures(self, has_futures):
        """Sets the has_futures of this InstrumentModel.

        Indicates whether there exists at least one non-cancelled, non-expired, tradable future for this instrument  , either an underlying value or a future class, with a valid listing (for the company/label) for which the account  is allowed to trade.  # noqa: E501

        :param has_futures: The has_futures of this InstrumentModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and has_futures is None:
            raise ValueError("Invalid value for `has_futures`, must not be `None`")  # noqa: E501

        self._has_futures = has_futures

    @property
    def has_srd(self):
        """Gets the has_srd of this InstrumentModel.  # noqa: E501

        Indicates whether there exists at least one non-cancelled, non-expired, tradable srd for this security, either an  underlying value or an srd class, with a valid listing (for the company/label) for which the account  is allowed to trade.  # noqa: E501

        :return: The has_srd of this InstrumentModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_srd

    @has_srd.setter
    def has_srd(self, has_srd):
        """Sets the has_srd of this InstrumentModel.

        Indicates whether there exists at least one non-cancelled, non-expired, tradable srd for this security, either an  underlying value or an srd class, with a valid listing (for the company/label) for which the account  is allowed to trade.  # noqa: E501

        :param has_srd: The has_srd of this InstrumentModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and has_srd is None:
            raise ValueError("Invalid value for `has_srd`, must not be `None`")  # noqa: E501

        self._has_srd = has_srd

    @property
    def has_leveraged_products(self):
        """Gets the has_leveraged_products of this InstrumentModel.  # noqa: E501

        Indicates whether there exists at least one non-cancelled, non-expired, tradable, visible leveraged  product for which the account is allowed to trade.  # noqa: E501

        :return: The has_leveraged_products of this InstrumentModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_leveraged_products

    @has_leveraged_products.setter
    def has_leveraged_products(self, has_leveraged_products):
        """Sets the has_leveraged_products of this InstrumentModel.

        Indicates whether there exists at least one non-cancelled, non-expired, tradable, visible leveraged  product for which the account is allowed to trade.  # noqa: E501

        :param has_leveraged_products: The has_leveraged_products of this InstrumentModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and has_leveraged_products is None:
            raise ValueError("Invalid value for `has_leveraged_products`, must not be `None`")  # noqa: E501

        self._has_leveraged_products = has_leveraged_products

    @property
    def has_order_modifications(self):
        """Gets the has_order_modifications of this InstrumentModel.  # noqa: E501

        Indicates if orders for the instrument can be modified  # noqa: E501

        :return: The has_order_modifications of this InstrumentModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_order_modifications

    @has_order_modifications.setter
    def has_order_modifications(self, has_order_modifications):
        """Sets the has_order_modifications of this InstrumentModel.

        Indicates if orders for the instrument can be modified  # noqa: E501

        :param has_order_modifications: The has_order_modifications of this InstrumentModel.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and has_order_modifications is None:
            raise ValueError("Invalid value for `has_order_modifications`, must not be `None`")  # noqa: E501

        self._has_order_modifications = has_order_modifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstrumentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstrumentModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstrumentModel):
            return True

        return self.to_dict() != other.to_dict()
