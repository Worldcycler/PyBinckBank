# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StatusHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_time': 'datetime',
        'status': 'str',
        'executed_quantity': 'float',
        'execution_price': 'float'
    }

    attribute_map = {
        'date_time': 'dateTime',
        'status': 'status',
        'executed_quantity': 'executedQuantity',
        'execution_price': 'executionPrice'
    }

    def __init__(self, date_time=None, status=None, executed_quantity=None, execution_price=None, _configuration=None):  # noqa: E501
        """StatusHistory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_time = None
        self._status = None
        self._executed_quantity = None
        self._execution_price = None
        self.discriminator = None

        self.date_time = date_time
        self.status = status
        if executed_quantity is not None:
            self.executed_quantity = executed_quantity
        if execution_price is not None:
            self.execution_price = execution_price

    @property
    def date_time(self):
        """Gets the date_time of this StatusHistory.  # noqa: E501

        DateTime of the status  # noqa: E501

        :return: The date_time of this StatusHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this StatusHistory.

        DateTime of the status  # noqa: E501

        :param date_time: The date_time of this StatusHistory.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def status(self):
        """Gets the status of this StatusHistory.  # noqa: E501

        name of the status  # noqa: E501

        :return: The status of this StatusHistory.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusHistory.

        name of the status  # noqa: E501

        :param status: The status of this StatusHistory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["placed", "placementConfirmed", "partiallyExecuted", "executed", "expired", "cancelationRequested", "canceled", "modificationRequested", "modified", "refused", "modificationRefused", "cancelationRefused", "remainderCanceled", "remainderExpired", "remainderExecuted", "other"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def executed_quantity(self):
        """Gets the executed_quantity of this StatusHistory.  # noqa: E501

        The number of orders executed  # noqa: E501

        :return: The executed_quantity of this StatusHistory.  # noqa: E501
        :rtype: float
        """
        return self._executed_quantity

    @executed_quantity.setter
    def executed_quantity(self, executed_quantity):
        """Sets the executed_quantity of this StatusHistory.

        The number of orders executed  # noqa: E501

        :param executed_quantity: The executed_quantity of this StatusHistory.  # noqa: E501
        :type: float
        """

        self._executed_quantity = executed_quantity

    @property
    def execution_price(self):
        """Gets the execution_price of this StatusHistory.  # noqa: E501

        Execution price of the executed quantities  # noqa: E501

        :return: The execution_price of this StatusHistory.  # noqa: E501
        :rtype: float
        """
        return self._execution_price

    @execution_price.setter
    def execution_price(self, execution_price):
        """Sets the execution_price of this StatusHistory.

        Execution price of the executed quantities  # noqa: E501

        :param execution_price: The execution_price of this StatusHistory.  # noqa: E501
        :type: float
        """

        self._execution_price = execution_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusHistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatusHistory):
            return True

        return self.to_dict() != other.to_dict()
