# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NewsItemModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'culture': 'str',
        'headline': 'str',
        'body': 'str',
        'format': 'str',
        'published_date_time': 'datetime',
        'instrument_ids': 'list[str]'
    }

    attribute_map = {
        'culture': 'culture',
        'headline': 'headline',
        'body': 'body',
        'format': 'format',
        'published_date_time': 'publishedDateTime',
        'instrument_ids': 'instrumentIds'
    }

    def __init__(self, culture=None, headline=None, body=None, format=None, published_date_time=None, instrument_ids=None, _configuration=None):  # noqa: E501
        """NewsItemModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._culture = None
        self._headline = None
        self._body = None
        self._format = None
        self._published_date_time = None
        self._instrument_ids = None
        self.discriminator = None

        self.culture = culture
        self.headline = headline
        if body is not None:
            self.body = body
        self.format = format
        self.published_date_time = published_date_time
        self.instrument_ids = instrument_ids

    @property
    def culture(self):
        """Gets the culture of this NewsItemModel.  # noqa: E501

        The culture of the message  # noqa: E501

        :return: The culture of this NewsItemModel.  # noqa: E501
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this NewsItemModel.

        The culture of the message  # noqa: E501

        :param culture: The culture of this NewsItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and culture is None:
            raise ValueError("Invalid value for `culture`, must not be `None`")  # noqa: E501

        self._culture = culture

    @property
    def headline(self):
        """Gets the headline of this NewsItemModel.  # noqa: E501

        Headline of the message  # noqa: E501

        :return: The headline of this NewsItemModel.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this NewsItemModel.

        Headline of the message  # noqa: E501

        :param headline: The headline of this NewsItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and headline is None:
            raise ValueError("Invalid value for `headline`, must not be `None`")  # noqa: E501

        self._headline = headline

    @property
    def body(self):
        """Gets the body of this NewsItemModel.  # noqa: E501

        Body of the message (optional)  # noqa: E501

        :return: The body of this NewsItemModel.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this NewsItemModel.

        Body of the message (optional)  # noqa: E501

        :param body: The body of this NewsItemModel.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def format(self):
        """Gets the format of this NewsItemModel.  # noqa: E501

        Indication whether the body is in HTML format  # noqa: E501

        :return: The format of this NewsItemModel.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this NewsItemModel.

        Indication whether the body is in HTML format  # noqa: E501

        :param format: The format of this NewsItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["plain", "html"]  # noqa: E501
        if (self._configuration.client_side_validation and
                format not in allowed_values):
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def published_date_time(self):
        """Gets the published_date_time of this NewsItemModel.  # noqa: E501

        Date and time the publisher published the message  # noqa: E501

        :return: The published_date_time of this NewsItemModel.  # noqa: E501
        :rtype: datetime
        """
        return self._published_date_time

    @published_date_time.setter
    def published_date_time(self, published_date_time):
        """Sets the published_date_time of this NewsItemModel.

        Date and time the publisher published the message  # noqa: E501

        :param published_date_time: The published_date_time of this NewsItemModel.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and published_date_time is None:
            raise ValueError("Invalid value for `published_date_time`, must not be `None`")  # noqa: E501

        self._published_date_time = published_date_time

    @property
    def instrument_ids(self):
        """Gets the instrument_ids of this NewsItemModel.  # noqa: E501

        The instruments for which this news message contains news (if any)  # noqa: E501

        :return: The instrument_ids of this NewsItemModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._instrument_ids

    @instrument_ids.setter
    def instrument_ids(self, instrument_ids):
        """Sets the instrument_ids of this NewsItemModel.

        The instruments for which this news message contains news (if any)  # noqa: E501

        :param instrument_ids: The instrument_ids of this NewsItemModel.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and instrument_ids is None:
            raise ValueError("Invalid value for `instrument_ids`, must not be `None`")  # noqa: E501

        self._instrument_ids = instrument_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewsItemModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewsItemModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewsItemModel):
            return True

        return self.to_dict() != other.to_dict()
