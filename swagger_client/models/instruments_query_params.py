# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InstrumentsQueryParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'instrument_type': 'str',
        'search_text': 'str',
        'isin': 'str',
        'mic': 'str'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'instrument_type': 'instrumentType',
        'search_text': 'searchText',
        'isin': 'isin',
        'mic': 'mic'
    }

    def __init__(self, account_number=None, instrument_type=None, search_text=None, isin=None, mic=None, _configuration=None):  # noqa: E501
        """InstrumentsQueryParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_number = None
        self._instrument_type = None
        self._search_text = None
        self._isin = None
        self._mic = None
        self.discriminator = None

        self.account_number = account_number
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if search_text is not None:
            self.search_text = search_text
        if isin is not None:
            self.isin = isin
        if mic is not None:
            self.mic = mic

    @property
    def account_number(self):
        """Gets the account_number of this InstrumentsQueryParams.  # noqa: E501

        Mandatory account number  # noqa: E501

        :return: The account_number of this InstrumentsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this InstrumentsQueryParams.

        Mandatory account number  # noqa: E501

        :param account_number: The account_number of this InstrumentsQueryParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_number is not None and len(account_number) > 15):
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_number is not None and len(account_number) < 3):
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `3`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_number is not None and not re.search(r'[0-9a-zA-Z]{3,}', account_number)):  # noqa: E501
            raise ValueError(r"Invalid value for `account_number`, must be a follow pattern or equal to `/[0-9a-zA-Z]{3,}/`")  # noqa: E501

        self._account_number = account_number

    @property
    def instrument_type(self):
        """Gets the instrument_type of this InstrumentsQueryParams.  # noqa: E501

        Additional optional filter on instrument type. Cannot be used alone.  # noqa: E501

        :return: The instrument_type of this InstrumentsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this InstrumentsQueryParams.

        Additional optional filter on instrument type. Cannot be used alone.  # noqa: E501

        :param instrument_type: The instrument_type of this InstrumentsQueryParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["bond", "cashDividend", "certificate", "choiceDividend", "claim", "coupon", "discounter", "equity", "future", "futureClass", "index", "investmentFund", "ipo", "option", "optionClass", "otherLeveragedProduct", "speeder", "sprinter", "srd", "srdClass", "stockDividend", "structuredProduct", "tracker", "turbo", "unclassified", "warrant"]  # noqa: E501
        if (self._configuration.client_side_validation and
                instrument_type not in allowed_values):
            raise ValueError(
                "Invalid value for `instrument_type` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument_type, allowed_values)
            )

        self._instrument_type = instrument_type

    @property
    def search_text(self):
        """Gets the search_text of this InstrumentsQueryParams.  # noqa: E501

        Case insensitive search text, minimum length 2. Cannot be used in combination with 'Isin'.  # noqa: E501

        :return: The search_text of this InstrumentsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this InstrumentsQueryParams.

        Case insensitive search text, minimum length 2. Cannot be used in combination with 'Isin'.  # noqa: E501

        :param search_text: The search_text of this InstrumentsQueryParams.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                search_text is not None and len(search_text) > 30):
            raise ValueError("Invalid value for `search_text`, length must be less than or equal to `30`")  # noqa: E501
        if (self._configuration.client_side_validation and
                search_text is not None and len(search_text) < 2):
            raise ValueError("Invalid value for `search_text`, length must be greater than or equal to `2`")  # noqa: E501

        self._search_text = search_text

    @property
    def isin(self):
        """Gets the isin of this InstrumentsQueryParams.  # noqa: E501

        Selection on isinCode. Cannot be used in combination with 'SearchText'.  # noqa: E501

        :return: The isin of this InstrumentsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this InstrumentsQueryParams.

        Selection on isinCode. Cannot be used in combination with 'SearchText'.  # noqa: E501

        :param isin: The isin of this InstrumentsQueryParams.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                isin is not None and len(isin) > 15):
            raise ValueError("Invalid value for `isin`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                isin is not None and len(isin) < 5):
            raise ValueError("Invalid value for `isin`, length must be greater than or equal to `5`")  # noqa: E501
        if (self._configuration.client_side_validation and
                isin is not None and not re.search(r'([A-Z]{2})([A-Z0-9]{5,})', isin)):  # noqa: E501
            raise ValueError(r"Invalid value for `isin`, must be a follow pattern or equal to `/([A-Z]{2})([A-Z0-9]{5,})/`")  # noqa: E501

        self._isin = isin

    @property
    def mic(self):
        """Gets the mic of this InstrumentsQueryParams.  # noqa: E501

        Additional optional selection on Market Identification Code, to be used only in combination with 'Isin'  # noqa: E501

        :return: The mic of this InstrumentsQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._mic

    @mic.setter
    def mic(self, mic):
        """Sets the mic of this InstrumentsQueryParams.

        Additional optional selection on Market Identification Code, to be used only in combination with 'Isin'  # noqa: E501

        :param mic: The mic of this InstrumentsQueryParams.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                mic is not None and len(mic) > 4):
            raise ValueError("Invalid value for `mic`, length must be less than or equal to `4`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mic is not None and len(mic) < 1):
            raise ValueError("Invalid value for `mic`, length must be greater than or equal to `1`")  # noqa: E501

        self._mic = mic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstrumentsQueryParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstrumentsQueryParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstrumentsQueryParams):
            return True

        return self.to_dict() != other.to_dict()
