# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HistoricalQuoteRequestQueryParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'from_date_time': 'datetime',
        'to_date_time': 'datetime',
        'interval': 'str'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'from_date_time': 'fromDateTime',
        'to_date_time': 'toDateTime',
        'interval': 'interval'
    }

    def __init__(self, account_number=None, from_date_time=None, to_date_time=None, interval=None, _configuration=None):  # noqa: E501
        """HistoricalQuoteRequestQueryParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_number = None
        self._from_date_time = None
        self._to_date_time = None
        self._interval = None
        self.discriminator = None

        self.account_number = account_number
        self.from_date_time = from_date_time
        if to_date_time is not None:
            self.to_date_time = to_date_time
        self.interval = interval

    @property
    def account_number(self):
        """Gets the account_number of this HistoricalQuoteRequestQueryParams.  # noqa: E501

        Mandatory account number  # noqa: E501

        :return: The account_number of this HistoricalQuoteRequestQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this HistoricalQuoteRequestQueryParams.

        Mandatory account number  # noqa: E501

        :param account_number: The account_number of this HistoricalQuoteRequestQueryParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_number is not None and len(account_number) > 15):
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_number is not None and len(account_number) < 3):
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `3`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_number is not None and not re.search(r'[0-9a-zA-Z]{3,}', account_number)):  # noqa: E501
            raise ValueError(r"Invalid value for `account_number`, must be a follow pattern or equal to `/[0-9a-zA-Z]{3,}/`")  # noqa: E501

        self._account_number = account_number

    @property
    def from_date_time(self):
        """Gets the from_date_time of this HistoricalQuoteRequestQueryParams.  # noqa: E501

        The start moment of historical quotes  # noqa: E501

        :return: The from_date_time of this HistoricalQuoteRequestQueryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date_time

    @from_date_time.setter
    def from_date_time(self, from_date_time):
        """Sets the from_date_time of this HistoricalQuoteRequestQueryParams.

        The start moment of historical quotes  # noqa: E501

        :param from_date_time: The from_date_time of this HistoricalQuoteRequestQueryParams.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and from_date_time is None:
            raise ValueError("Invalid value for `from_date_time`, must not be `None`")  # noqa: E501

        self._from_date_time = from_date_time

    @property
    def to_date_time(self):
        """Gets the to_date_time of this HistoricalQuoteRequestQueryParams.  # noqa: E501

        The end moment of historical quotes, defaulting to the Current date and time according to UTC time standard  # noqa: E501

        :return: The to_date_time of this HistoricalQuoteRequestQueryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date_time

    @to_date_time.setter
    def to_date_time(self, to_date_time):
        """Sets the to_date_time of this HistoricalQuoteRequestQueryParams.

        The end moment of historical quotes, defaulting to the Current date and time according to UTC time standard  # noqa: E501

        :param to_date_time: The to_date_time of this HistoricalQuoteRequestQueryParams.  # noqa: E501
        :type: datetime
        """

        self._to_date_time = to_date_time

    @property
    def interval(self):
        """Gets the interval of this HistoricalQuoteRequestQueryParams.  # noqa: E501

        Interval for historical quotes  Depending on the interval, the historical quotes collection returned will be limited to a certain period:  Max. number of days for one minute interval is 5.  Max. number of days for five minute interval is 20.  Max. number of days for ten minute interval is 20.  Max. number of days for fifteen minute interval is 60.  Max. number of days for one hour interval is 120.  Max. number of years for one day interval is 10.  Max. number of years for one week interval is 10.  # noqa: E501

        :return: The interval of this HistoricalQuoteRequestQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this HistoricalQuoteRequestQueryParams.

        Interval for historical quotes  Depending on the interval, the historical quotes collection returned will be limited to a certain period:  Max. number of days for one minute interval is 5.  Max. number of days for five minute interval is 20.  Max. number of days for ten minute interval is 20.  Max. number of days for fifteen minute interval is 60.  Max. number of days for one hour interval is 120.  Max. number of years for one day interval is 10.  Max. number of years for one week interval is 10.  # noqa: E501

        :param interval: The interval of this HistoricalQuoteRequestQueryParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501
        allowed_values = ["oneMinute", "fiveMinutes", "tenMinutes", "fifteenMinutes", "oneHour", "oneDay", "oneWeek", "oneMonth"]  # noqa: E501
        if (self._configuration.client_side_validation and
                interval not in allowed_values):
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"  # noqa: E501
                .format(interval, allowed_values)
            )

        self._interval = interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoricalQuoteRequestQueryParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoricalQuoteRequestQueryParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HistoricalQuoteRequestQueryParams):
            return True

        return self.to_dict() != other.to_dict()
