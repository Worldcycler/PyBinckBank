# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NewOrderModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'quantity': 'float',
        'duration': 'str',
        'expiration_date': 'datetime',
        'limit_price': 'float',
        'stop_price': 'float',
        'cash': 'NewOrderModelCash',
        'srd': 'NewOrderModelSrd',
        'option': 'NewOrderModelOption',
        'future': 'NewOrderModelFuture',
        'validation_code': 'str',
        'reference_id': 'str'
    }

    attribute_map = {
        'type': 'type',
        'quantity': 'quantity',
        'duration': 'duration',
        'expiration_date': 'expirationDate',
        'limit_price': 'limitPrice',
        'stop_price': 'stopPrice',
        'cash': 'cash',
        'srd': 'srd',
        'option': 'option',
        'future': 'future',
        'validation_code': 'validationCode',
        'reference_id': 'referenceId'
    }

    def __init__(self, type=None, quantity=None, duration=None, expiration_date=None, limit_price=None, stop_price=None, cash=None, srd=None, option=None, future=None, validation_code=None, reference_id=None, _configuration=None):  # noqa: E501
        """NewOrderModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._quantity = None
        self._duration = None
        self._expiration_date = None
        self._limit_price = None
        self._stop_price = None
        self._cash = None
        self._srd = None
        self._option = None
        self._future = None
        self._validation_code = None
        self._reference_id = None
        self.discriminator = None

        self.type = type
        self.quantity = quantity
        self.duration = duration
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if limit_price is not None:
            self.limit_price = limit_price
        if stop_price is not None:
            self.stop_price = stop_price
        if cash is not None:
            self.cash = cash
        if srd is not None:
            self.srd = srd
        if option is not None:
            self.option = option
        if future is not None:
            self.future = future
        if validation_code is not None:
            self.validation_code = validation_code
        if reference_id is not None:
            self.reference_id = reference_id

    @property
    def type(self):
        """Gets the type of this NewOrderModel.  # noqa: E501

        The kind of order to be placed  # noqa: E501

        :return: The type of this NewOrderModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewOrderModel.

        The kind of order to be placed  # noqa: E501

        :param type: The type of this NewOrderModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["limit", "market", "stop", "stopLimit"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def quantity(self):
        """Gets the quantity of this NewOrderModel.  # noqa: E501

        The number of financial instruments to buy or sell  # noqa: E501

        :return: The quantity of this NewOrderModel.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this NewOrderModel.

        The number of financial instruments to buy or sell  # noqa: E501

        :param quantity: The quantity of this NewOrderModel.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def duration(self):
        """Gets the duration of this NewOrderModel.  # noqa: E501

        Specifies the term for which the order is active - in general, duration is 'day' for market orders  # noqa: E501

        :return: The duration of this NewOrderModel.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this NewOrderModel.

        Specifies the term for which the order is active - in general, duration is 'day' for market orders  # noqa: E501

        :param duration: The duration of this NewOrderModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501
        allowed_values = ["day", "goodTillCancelled", "goodTillDate"]  # noqa: E501
        if (self._configuration.client_side_validation and
                duration not in allowed_values):
            raise ValueError(
                "Invalid value for `duration` ({0}), must be one of {1}"  # noqa: E501
                .format(duration, allowed_values)
            )

        self._duration = duration

    @property
    def expiration_date(self):
        """Gets the expiration_date of this NewOrderModel.  # noqa: E501

        The date when the order will be expired, used in combination with duration GoodTillDateTime  # noqa: E501

        :return: The expiration_date of this NewOrderModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this NewOrderModel.

        The date when the order will be expired, used in combination with duration GoodTillDateTime  # noqa: E501

        :param expiration_date: The expiration_date of this NewOrderModel.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def limit_price(self):
        """Gets the limit_price of this NewOrderModel.  # noqa: E501

        The highest price at which to buy or the lowest price at which to sell (only if type is limit or stopLimit)  # noqa: E501

        :return: The limit_price of this NewOrderModel.  # noqa: E501
        :rtype: float
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this NewOrderModel.

        The highest price at which to buy or the lowest price at which to sell (only if type is limit or stopLimit)  # noqa: E501

        :param limit_price: The limit_price of this NewOrderModel.  # noqa: E501
        :type: float
        """

        self._limit_price = limit_price

    @property
    def stop_price(self):
        """Gets the stop_price of this NewOrderModel.  # noqa: E501

        The trigger price to initiate a buy or sell order, applicable when type is stop or stopLimit  # noqa: E501

        :return: The stop_price of this NewOrderModel.  # noqa: E501
        :rtype: float
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this NewOrderModel.

        The trigger price to initiate a buy or sell order, applicable when type is stop or stopLimit  # noqa: E501

        :param stop_price: The stop_price of this NewOrderModel.  # noqa: E501
        :type: float
        """

        self._stop_price = stop_price

    @property
    def cash(self):
        """Gets the cash of this NewOrderModel.  # noqa: E501

        For cash orders (equities), this field is required  # noqa: E501

        :return: The cash of this NewOrderModel.  # noqa: E501
        :rtype: NewOrderModelCash
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this NewOrderModel.

        For cash orders (equities), this field is required  # noqa: E501

        :param cash: The cash of this NewOrderModel.  # noqa: E501
        :type: NewOrderModelCash
        """

        self._cash = cash

    @property
    def srd(self):
        """Gets the srd of this NewOrderModel.  # noqa: E501

        For SRD orders (equities, France), this field is required  # noqa: E501

        :return: The srd of this NewOrderModel.  # noqa: E501
        :rtype: NewOrderModelSrd
        """
        return self._srd

    @srd.setter
    def srd(self, srd):
        """Sets the srd of this NewOrderModel.

        For SRD orders (equities, France), this field is required  # noqa: E501

        :param srd: The srd of this NewOrderModel.  # noqa: E501
        :type: NewOrderModelSrd
        """

        self._srd = srd

    @property
    def option(self):
        """Gets the option of this NewOrderModel.  # noqa: E501

        For option orders, this field is required  # noqa: E501

        :return: The option of this NewOrderModel.  # noqa: E501
        :rtype: NewOrderModelOption
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this NewOrderModel.

        For option orders, this field is required  # noqa: E501

        :param option: The option of this NewOrderModel.  # noqa: E501
        :type: NewOrderModelOption
        """

        self._option = option

    @property
    def future(self):
        """Gets the future of this NewOrderModel.  # noqa: E501

        For future orders, this field is required  # noqa: E501

        :return: The future of this NewOrderModel.  # noqa: E501
        :rtype: NewOrderModelFuture
        """
        return self._future

    @future.setter
    def future(self, future):
        """Sets the future of this NewOrderModel.

        For future orders, this field is required  # noqa: E501

        :param future: The future of this NewOrderModel.  # noqa: E501
        :type: NewOrderModelFuture
        """

        self._future = future

    @property
    def validation_code(self):
        """Gets the validation_code of this NewOrderModel.  # noqa: E501

        Order validation code (needs to be obtained by a preview order)  # noqa: E501

        :return: The validation_code of this NewOrderModel.  # noqa: E501
        :rtype: str
        """
        return self._validation_code

    @validation_code.setter
    def validation_code(self, validation_code):
        """Sets the validation_code of this NewOrderModel.

        Order validation code (needs to be obtained by a preview order)  # noqa: E501

        :param validation_code: The validation_code of this NewOrderModel.  # noqa: E501
        :type: str
        """

        self._validation_code = validation_code

    @property
    def reference_id(self):
        """Gets the reference_id of this NewOrderModel.  # noqa: E501

        Reference identifier available for 3rd parties. Max length 40 chars  # noqa: E501

        :return: The reference_id of this NewOrderModel.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this NewOrderModel.

        Reference identifier available for 3rd parties. Max length 40 chars  # noqa: E501

        :param reference_id: The reference_id of this NewOrderModel.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewOrderModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewOrderModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewOrderModel):
            return True

        return self.to_dict() != other.to_dict()
