# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HistoricalQuoteModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_time': 'datetime',
        'last': 'float',
        'low': 'float',
        'high': 'float',
        'first': 'float',
        'cum_vol': 'int'
    }

    attribute_map = {
        'date_time': 'dateTime',
        'last': 'last',
        'low': 'low',
        'high': 'high',
        'first': 'first',
        'cum_vol': 'cumVol'
    }

    def __init__(self, date_time=None, last=None, low=None, high=None, first=None, cum_vol=None, _configuration=None):  # noqa: E501
        """HistoricalQuoteModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_time = None
        self._last = None
        self._low = None
        self._high = None
        self._first = None
        self._cum_vol = None
        self.discriminator = None

        self.date_time = date_time
        self.last = last
        self.low = low
        self.high = high
        self.first = first
        self.cum_vol = cum_vol

    @property
    def date_time(self):
        """Gets the date_time of this HistoricalQuoteModel.  # noqa: E501

        Date and time of the quote according to the exchange (local to the market)  # noqa: E501

        :return: The date_time of this HistoricalQuoteModel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this HistoricalQuoteModel.

        Date and time of the quote according to the exchange (local to the market)  # noqa: E501

        :param date_time: The date_time of this HistoricalQuoteModel.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def last(self):
        """Gets the last of this HistoricalQuoteModel.  # noqa: E501

        Latest trade price at the end of the interval  # noqa: E501

        :return: The last of this HistoricalQuoteModel.  # noqa: E501
        :rtype: float
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this HistoricalQuoteModel.

        Latest trade price at the end of the interval  # noqa: E501

        :param last: The last of this HistoricalQuoteModel.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and last is None:
            raise ValueError("Invalid value for `last`, must not be `None`")  # noqa: E501

        self._last = last

    @property
    def low(self):
        """Gets the low of this HistoricalQuoteModel.  # noqa: E501

        Lowest price within the interval  # noqa: E501

        :return: The low of this HistoricalQuoteModel.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this HistoricalQuoteModel.

        Lowest price within the interval  # noqa: E501

        :param low: The low of this HistoricalQuoteModel.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and low is None:
            raise ValueError("Invalid value for `low`, must not be `None`")  # noqa: E501

        self._low = low

    @property
    def high(self):
        """Gets the high of this HistoricalQuoteModel.  # noqa: E501

        Highest price within the interval  # noqa: E501

        :return: The high of this HistoricalQuoteModel.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this HistoricalQuoteModel.

        Highest price within the interval  # noqa: E501

        :param high: The high of this HistoricalQuoteModel.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and high is None:
            raise ValueError("Invalid value for `high`, must not be `None`")  # noqa: E501

        self._high = high

    @property
    def first(self):
        """Gets the first of this HistoricalQuoteModel.  # noqa: E501

        First trade price within the interval  # noqa: E501

        :return: The first of this HistoricalQuoteModel.  # noqa: E501
        :rtype: float
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this HistoricalQuoteModel.

        First trade price within the interval  # noqa: E501

        :param first: The first of this HistoricalQuoteModel.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")  # noqa: E501

        self._first = first

    @property
    def cum_vol(self):
        """Gets the cum_vol of this HistoricalQuoteModel.  # noqa: E501

        Sum of all volumes within the interval  # noqa: E501

        :return: The cum_vol of this HistoricalQuoteModel.  # noqa: E501
        :rtype: int
        """
        return self._cum_vol

    @cum_vol.setter
    def cum_vol(self, cum_vol):
        """Sets the cum_vol of this HistoricalQuoteModel.

        Sum of all volumes within the interval  # noqa: E501

        :param cum_vol: The cum_vol of this HistoricalQuoteModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and cum_vol is None:
            raise ValueError("Invalid value for `cum_vol`, must not be `None`")  # noqa: E501

        self._cum_vol = cum_vol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoricalQuoteModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoricalQuoteModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HistoricalQuoteModel):
            return True

        return self.to_dict() != other.to_dict()
