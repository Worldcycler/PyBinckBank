# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PositionResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'unrealized': 'float',
        'realized': 'float',
        'total': 'float',
        'unrealized_percentage': 'float',
        'purchase_value': 'float'
    }

    attribute_map = {
        'currency': 'currency',
        'unrealized': 'unrealized',
        'realized': 'realized',
        'total': 'total',
        'unrealized_percentage': 'unrealizedPercentage',
        'purchase_value': 'purchaseValue'
    }

    def __init__(self, currency=None, unrealized=None, realized=None, total=None, unrealized_percentage=None, purchase_value=None, _configuration=None):  # noqa: E501
        """PositionResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency = None
        self._unrealized = None
        self._realized = None
        self._total = None
        self._unrealized_percentage = None
        self._purchase_value = None
        self.discriminator = None

        self.currency = currency
        if unrealized is not None:
            self.unrealized = unrealized
        self.realized = realized
        self.total = total
        if unrealized_percentage is not None:
            self.unrealized_percentage = unrealized_percentage
        self.purchase_value = purchase_value

    @property
    def currency(self):
        """Gets the currency of this PositionResult.  # noqa: E501

        Currency the result is expressed in  # noqa: E501

        :return: The currency of this PositionResult.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PositionResult.

        Currency the result is expressed in  # noqa: E501

        :param currency: The currency of this PositionResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def unrealized(self):
        """Gets the unrealized of this PositionResult.  # noqa: E501

        Unrealized result  # noqa: E501

        :return: The unrealized of this PositionResult.  # noqa: E501
        :rtype: float
        """
        return self._unrealized

    @unrealized.setter
    def unrealized(self, unrealized):
        """Sets the unrealized of this PositionResult.

        Unrealized result  # noqa: E501

        :param unrealized: The unrealized of this PositionResult.  # noqa: E501
        :type: float
        """

        self._unrealized = unrealized

    @property
    def realized(self):
        """Gets the realized of this PositionResult.  # noqa: E501

        Realized result  # noqa: E501

        :return: The realized of this PositionResult.  # noqa: E501
        :rtype: float
        """
        return self._realized

    @realized.setter
    def realized(self, realized):
        """Sets the realized of this PositionResult.

        Realized result  # noqa: E501

        :param realized: The realized of this PositionResult.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and realized is None:
            raise ValueError("Invalid value for `realized`, must not be `None`")  # noqa: E501

        self._realized = realized

    @property
    def total(self):
        """Gets the total of this PositionResult.  # noqa: E501

        Total result  # noqa: E501

        :return: The total of this PositionResult.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PositionResult.

        Total result  # noqa: E501

        :param total: The total of this PositionResult.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def unrealized_percentage(self):
        """Gets the unrealized_percentage of this PositionResult.  # noqa: E501

        Unrealized result in a percentage of ... (?)  # noqa: E501

        :return: The unrealized_percentage of this PositionResult.  # noqa: E501
        :rtype: float
        """
        return self._unrealized_percentage

    @unrealized_percentage.setter
    def unrealized_percentage(self, unrealized_percentage):
        """Sets the unrealized_percentage of this PositionResult.

        Unrealized result in a percentage of ... (?)  # noqa: E501

        :param unrealized_percentage: The unrealized_percentage of this PositionResult.  # noqa: E501
        :type: float
        """

        self._unrealized_percentage = unrealized_percentage

    @property
    def purchase_value(self):
        """Gets the purchase_value of this PositionResult.  # noqa: E501

        Purchase value  # noqa: E501

        :return: The purchase_value of this PositionResult.  # noqa: E501
        :rtype: float
        """
        return self._purchase_value

    @purchase_value.setter
    def purchase_value(self, purchase_value):
        """Sets the purchase_value of this PositionResult.

        Purchase value  # noqa: E501

        :param purchase_value: The purchase_value of this PositionResult.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and purchase_value is None:
            raise ValueError("Invalid value for `purchase_value`, must not be `None`")  # noqa: E501

        self._purchase_value = purchase_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PositionResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionResult):
            return True

        return self.to_dict() != other.to_dict()
