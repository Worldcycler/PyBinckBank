# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ModifyOrderModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_number': 'int',
        'limit_price': 'float',
        'validation_code': 'str'
    }

    attribute_map = {
        'order_number': 'orderNumber',
        'limit_price': 'limitPrice',
        'validation_code': 'validationCode'
    }

    def __init__(self, order_number=None, limit_price=None, validation_code=None, _configuration=None):  # noqa: E501
        """ModifyOrderModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._order_number = None
        self._limit_price = None
        self._validation_code = None
        self.discriminator = None

        self.order_number = order_number
        self.limit_price = limit_price
        if validation_code is not None:
            self.validation_code = validation_code

    @property
    def order_number(self):
        """Gets the order_number of this ModifyOrderModel.  # noqa: E501

        Order Number of Account.  # noqa: E501

        :return: The order_number of this ModifyOrderModel.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ModifyOrderModel.

        Order Number of Account.  # noqa: E501

        :param order_number: The order_number of this ModifyOrderModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and order_number is None:
            raise ValueError("Invalid value for `order_number`, must not be `None`")  # noqa: E501

        self._order_number = order_number

    @property
    def limit_price(self):
        """Gets the limit_price of this ModifyOrderModel.  # noqa: E501

        New Limit Price of the Order.  # noqa: E501

        :return: The limit_price of this ModifyOrderModel.  # noqa: E501
        :rtype: float
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this ModifyOrderModel.

        New Limit Price of the Order.  # noqa: E501

        :param limit_price: The limit_price of this ModifyOrderModel.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and limit_price is None:
            raise ValueError("Invalid value for `limit_price`, must not be `None`")  # noqa: E501

        self._limit_price = limit_price

    @property
    def validation_code(self):
        """Gets the validation_code of this ModifyOrderModel.  # noqa: E501

        Order validation code (needs to be obtained by a preview modify order)  # noqa: E501

        :return: The validation_code of this ModifyOrderModel.  # noqa: E501
        :rtype: str
        """
        return self._validation_code

    @validation_code.setter
    def validation_code(self, validation_code):
        """Sets the validation_code of this ModifyOrderModel.

        Order validation code (needs to be obtained by a preview modify order)  # noqa: E501

        :param validation_code: The validation_code of this ModifyOrderModel.  # noqa: E501
        :type: str
        """

        self._validation_code = validation_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyOrderModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyOrderModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModifyOrderModel):
            return True

        return self.to_dict() != other.to_dict()
