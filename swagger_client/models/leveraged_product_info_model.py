# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LeveragedProductInfoModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bonus': 'float',
        'cap': 'float',
        'ended_date_time': 'datetime',
        'exchange_ratio': 'float',
        'financing_level': 'float',
        'leverage': 'float',
        'remaining_value': 'float',
        'stop_loss_level': 'float',
        'stop_loss_level2': 'float',
        'strike': 'float'
    }

    attribute_map = {
        'bonus': 'bonus',
        'cap': 'cap',
        'ended_date_time': 'endedDateTime',
        'exchange_ratio': 'exchangeRatio',
        'financing_level': 'financingLevel',
        'leverage': 'leverage',
        'remaining_value': 'remainingValue',
        'stop_loss_level': 'stopLossLevel',
        'stop_loss_level2': 'stopLossLevel2',
        'strike': 'strike'
    }

    def __init__(self, bonus=None, cap=None, ended_date_time=None, exchange_ratio=None, financing_level=None, leverage=None, remaining_value=None, stop_loss_level=None, stop_loss_level2=None, strike=None, _configuration=None):  # noqa: E501
        """LeveragedProductInfoModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bonus = None
        self._cap = None
        self._ended_date_time = None
        self._exchange_ratio = None
        self._financing_level = None
        self._leverage = None
        self._remaining_value = None
        self._stop_loss_level = None
        self._stop_loss_level2 = None
        self._strike = None
        self.discriminator = None

        if bonus is not None:
            self.bonus = bonus
        if cap is not None:
            self.cap = cap
        if ended_date_time is not None:
            self.ended_date_time = ended_date_time
        if exchange_ratio is not None:
            self.exchange_ratio = exchange_ratio
        if financing_level is not None:
            self.financing_level = financing_level
        if leverage is not None:
            self.leverage = leverage
        if remaining_value is not None:
            self.remaining_value = remaining_value
        if stop_loss_level is not None:
            self.stop_loss_level = stop_loss_level
        if stop_loss_level2 is not None:
            self.stop_loss_level2 = stop_loss_level2
        if strike is not None:
            self.strike = strike

    @property
    def bonus(self):
        """Gets the bonus of this LeveragedProductInfoModel.  # noqa: E501

        Bonus  # noqa: E501

        :return: The bonus of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this LeveragedProductInfoModel.

        Bonus  # noqa: E501

        :param bonus: The bonus of this LeveragedProductInfoModel.  # noqa: E501
        :type: float
        """

        self._bonus = bonus

    @property
    def cap(self):
        """Gets the cap of this LeveragedProductInfoModel.  # noqa: E501

        Cap  # noqa: E501

        :return: The cap of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this LeveragedProductInfoModel.

        Cap  # noqa: E501

        :param cap: The cap of this LeveragedProductInfoModel.  # noqa: E501
        :type: float
        """

        self._cap = cap

    @property
    def ended_date_time(self):
        """Gets the ended_date_time of this LeveragedProductInfoModel.  # noqa: E501

        Enddate and time  # noqa: E501

        :return: The ended_date_time of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_date_time

    @ended_date_time.setter
    def ended_date_time(self, ended_date_time):
        """Sets the ended_date_time of this LeveragedProductInfoModel.

        Enddate and time  # noqa: E501

        :param ended_date_time: The ended_date_time of this LeveragedProductInfoModel.  # noqa: E501
        :type: datetime
        """

        self._ended_date_time = ended_date_time

    @property
    def exchange_ratio(self):
        """Gets the exchange_ratio of this LeveragedProductInfoModel.  # noqa: E501

        Exchange ratio  # noqa: E501

        :return: The exchange_ratio of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._exchange_ratio

    @exchange_ratio.setter
    def exchange_ratio(self, exchange_ratio):
        """Sets the exchange_ratio of this LeveragedProductInfoModel.

        Exchange ratio  # noqa: E501

        :param exchange_ratio: The exchange_ratio of this LeveragedProductInfoModel.  # noqa: E501
        :type: float
        """

        self._exchange_ratio = exchange_ratio

    @property
    def financing_level(self):
        """Gets the financing_level of this LeveragedProductInfoModel.  # noqa: E501

        Financing level  # noqa: E501

        :return: The financing_level of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._financing_level

    @financing_level.setter
    def financing_level(self, financing_level):
        """Sets the financing_level of this LeveragedProductInfoModel.

        Financing level  # noqa: E501

        :param financing_level: The financing_level of this LeveragedProductInfoModel.  # noqa: E501
        :type: float
        """

        self._financing_level = financing_level

    @property
    def leverage(self):
        """Gets the leverage of this LeveragedProductInfoModel.  # noqa: E501

        Leverage  # noqa: E501

        :return: The leverage of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._leverage

    @leverage.setter
    def leverage(self, leverage):
        """Sets the leverage of this LeveragedProductInfoModel.

        Leverage  # noqa: E501

        :param leverage: The leverage of this LeveragedProductInfoModel.  # noqa: E501
        :type: float
        """

        self._leverage = leverage

    @property
    def remaining_value(self):
        """Gets the remaining_value of this LeveragedProductInfoModel.  # noqa: E501

        Remaining Value  # noqa: E501

        :return: The remaining_value of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._remaining_value

    @remaining_value.setter
    def remaining_value(self, remaining_value):
        """Sets the remaining_value of this LeveragedProductInfoModel.

        Remaining Value  # noqa: E501

        :param remaining_value: The remaining_value of this LeveragedProductInfoModel.  # noqa: E501
        :type: float
        """

        self._remaining_value = remaining_value

    @property
    def stop_loss_level(self):
        """Gets the stop_loss_level of this LeveragedProductInfoModel.  # noqa: E501

        Stoploss minimum  # noqa: E501

        :return: The stop_loss_level of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._stop_loss_level

    @stop_loss_level.setter
    def stop_loss_level(self, stop_loss_level):
        """Sets the stop_loss_level of this LeveragedProductInfoModel.

        Stoploss minimum  # noqa: E501

        :param stop_loss_level: The stop_loss_level of this LeveragedProductInfoModel.  # noqa: E501
        :type: float
        """

        self._stop_loss_level = stop_loss_level

    @property
    def stop_loss_level2(self):
        """Gets the stop_loss_level2 of this LeveragedProductInfoModel.  # noqa: E501

        Stoploss maximum  # noqa: E501

        :return: The stop_loss_level2 of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._stop_loss_level2

    @stop_loss_level2.setter
    def stop_loss_level2(self, stop_loss_level2):
        """Sets the stop_loss_level2 of this LeveragedProductInfoModel.

        Stoploss maximum  # noqa: E501

        :param stop_loss_level2: The stop_loss_level2 of this LeveragedProductInfoModel.  # noqa: E501
        :type: float
        """

        self._stop_loss_level2 = stop_loss_level2

    @property
    def strike(self):
        """Gets the strike of this LeveragedProductInfoModel.  # noqa: E501

        Strike value  # noqa: E501

        :return: The strike of this LeveragedProductInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this LeveragedProductInfoModel.

        Strike value  # noqa: E501

        :param strike: The strike of this LeveragedProductInfoModel.  # noqa: E501
        :type: float
        """

        self._strike = strike

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeveragedProductInfoModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeveragedProductInfoModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LeveragedProductInfoModel):
            return True

        return self.to_dict() != other.to_dict()
