# coding: utf-8

"""
    BinckBank.OpenApi

      BinckBank OpenAPI is an API Platform to access BinckBank's trading services.    Curious? Request your access key after reading the documentation on Github: https://github.com/binckbank-api/client-js#binck-openapi-documentation      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PriceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'float',
        'price_date_time': 'datetime',
        'tags': 'str'
    }

    attribute_map = {
        'price': 'price',
        'price_date_time': 'priceDateTime',
        'tags': 'tags'
    }

    def __init__(self, price=None, price_date_time=None, tags=None, _configuration=None):  # noqa: E501
        """PriceModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._price = None
        self._price_date_time = None
        self._tags = None
        self.discriminator = None

        self.price = price
        self.price_date_time = price_date_time
        if tags is not None:
            self.tags = tags

    @property
    def price(self):
        """Gets the price of this PriceModel.  # noqa: E501

        Quote Price  # noqa: E501

        :return: The price of this PriceModel.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PriceModel.

        Quote Price  # noqa: E501

        :param price: The price of this PriceModel.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def price_date_time(self):
        """Gets the price_date_time of this PriceModel.  # noqa: E501

        Date and time of the quote according to the exchange (local to the market)  # noqa: E501

        :return: The price_date_time of this PriceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._price_date_time

    @price_date_time.setter
    def price_date_time(self, price_date_time):
        """Sets the price_date_time of this PriceModel.

        Date and time of the quote according to the exchange (local to the market)  # noqa: E501

        :param price_date_time: The price_date_time of this PriceModel.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and price_date_time is None:
            raise ValueError("Invalid value for `price_date_time`, must not be `None`")  # noqa: E501

        self._price_date_time = price_date_time

    @property
    def tags(self):
        """Gets the tags of this PriceModel.  # noqa: E501

        Tags for Market (M), Cancel (O), MarketOpen (O), ExcludeIntraday (X)  # noqa: E501

        :return: The tags of this PriceModel.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PriceModel.

        Tags for Market (M), Cancel (O), MarketOpen (O), ExcludeIntraday (X)  # noqa: E501

        :param tags: The tags of this PriceModel.  # noqa: E501
        :type: str
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PriceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PriceModel):
            return True

        return self.to_dict() != other.to_dict()
